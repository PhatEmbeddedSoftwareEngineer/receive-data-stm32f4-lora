
received lora stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004570  08004570  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004570  08004570  00005570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004578  08004578  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004578  08004578  00005578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800457c  0800457c  0000557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004580  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000068  080045e8  00006068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080045e8  000065b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2a3  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f58  00000000  00000000  0001133b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00013298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ae  00000000  00000000  00013cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001734c  00000000  00000000  0001446e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc53  00000000  00000000  0002b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895f3  00000000  00000000  0003840d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  000c1a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000c4a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004440 	.word	0x08004440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004440 	.word	0x08004440

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <init_gpio>:
 */

#include "gpio.h"

void init_gpio()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <init_gpio+0xd8>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a2e      	ldr	r2, [pc, #184]	@ (8000648 <init_gpio+0xd8>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <init_gpio+0xd8>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <init_gpio+0xd8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a27      	ldr	r2, [pc, #156]	@ (8000648 <init_gpio+0xd8>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <init_gpio+0xd8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <init_gpio+0xd8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <init_gpio+0xd8>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <init_gpio+0xd8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2110      	movs	r1, #16
 80005de:	481b      	ldr	r0, [pc, #108]	@ (800064c <init_gpio+0xdc>)
 80005e0:	f000 ff06 	bl	80013f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2102      	movs	r1, #2
 80005e8:	4819      	ldr	r0, [pc, #100]	@ (8000650 <init_gpio+0xe0>)
 80005ea:	f000 ff01 	bl	80013f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = NSS_Pin;
 80005ee:	2310      	movs	r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <init_gpio+0xdc>)
 8000606:	f000 fd57 	bl	80010b8 <HAL_GPIO_Init>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <init_gpio+0xe4>)
 800061e:	f000 fd4b 	bl	80010b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8000622:	2302      	movs	r3, #2
 8000624:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <init_gpio+0xe0>)
 800063a:	f000 fd3d 	bl	80010b8 <HAL_GPIO_Init>

}
 800063e:	bf00      	nop
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000
 8000650:	40020800 	.word	0x40020800
 8000654:	40020400 	.word	0x40020400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fbaf 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f899 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f961 	bl	800092c <MX_GPIO_Init>
  MX_SPI1_Init();
 800066a:	f000 f8ff 	bl	800086c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800066e:	f000 f933 	bl	80008d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_gpio();
 8000672:	f7ff ff7d 	bl	8000570 <init_gpio>
  init_spi1();
 8000676:	f000 f9a7 	bl	80009c8 <init_spi1>
  printf("Mode: Slave\r\n");
 800067a:	4837      	ldr	r0, [pc, #220]	@ (8000758 <main+0x100>)
 800067c:	f003 f86e 	bl	800375c <puts>
  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000680:	4b36      	ldr	r3, [pc, #216]	@ (800075c <main+0x104>)
 8000682:	4a37      	ldr	r2, [pc, #220]	@ (8000760 <main+0x108>)
 8000684:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000686:	4b35      	ldr	r3, [pc, #212]	@ (800075c <main+0x104>)
 8000688:	2201      	movs	r2, #1
 800068a:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 800068c:	4b33      	ldr	r3, [pc, #204]	@ (800075c <main+0x104>)
 800068e:	4a35      	ldr	r2, [pc, #212]	@ (8000764 <main+0x10c>)
 8000690:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000692:	4b32      	ldr	r3, [pc, #200]	@ (800075c <main+0x104>)
 8000694:	2210      	movs	r2, #16
 8000696:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8000698:	4b30      	ldr	r3, [pc, #192]	@ (800075c <main+0x104>)
 800069a:	4a33      	ldr	r2, [pc, #204]	@ (8000768 <main+0x110>)
 800069c:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <main+0x104>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 80006a4:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <main+0x104>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <main+0x114>)
 80006a8:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0x118>)
 80006ac:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <main+0x104>)
 80006ae:	601a      	str	r2, [r3, #0]

  printf("Configuring LoRa module\r\n");
 80006b0:	4830      	ldr	r0, [pc, #192]	@ (8000774 <main+0x11c>)
 80006b2:	f003 f853 	bl	800375c <puts>
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 80006b6:	230a      	movs	r3, #10
 80006b8:	9305      	str	r3, [sp, #20]
 80006ba:	2300      	movs	r3, #0
 80006bc:	9304      	str	r3, [sp, #16]
 80006be:	2300      	movs	r3, #0
 80006c0:	9303      	str	r3, [sp, #12]
 80006c2:	2307      	movs	r3, #7
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	a320      	add	r3, pc, #128	@ (adr r3, 8000750 <main+0xf8>)
 80006d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d4:	4826      	ldr	r0, [pc, #152]	@ (8000770 <main+0x118>)
 80006d6:	f002 fe0c 	bl	80032f2 <SX1278_init>
  		  	  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  printf("Done configuring LoRaModule\r\n");
 80006da:	4827      	ldr	r0, [pc, #156]	@ (8000778 <main+0x120>)
 80006dc:	f003 f83e 	bl	800375c <puts>
  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80006e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006e4:	2110      	movs	r1, #16
 80006e6:	4822      	ldr	r0, [pc, #136]	@ (8000770 <main+0x118>)
 80006e8:	f002 fd5a 	bl	80031a0 <SX1278_LoRaEntryRx>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a23      	ldr	r2, [pc, #140]	@ (800077c <main+0x124>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Slave ...\r\n");
 80006f2:	4823      	ldr	r0, [pc, #140]	@ (8000780 <main+0x128>)
 80006f4:	f003 f832 	bl	800375c <puts>
	  HAL_Delay(800);
 80006f8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80006fc:	f000 fbd2 	bl	8000ea4 <HAL_Delay>
	  printf("Receiving package...\r\n");
 8000700:	4820      	ldr	r0, [pc, #128]	@ (8000784 <main+0x12c>)
 8000702:	f003 f82b 	bl	800375c <puts>

	  ret = SX1278_LoRaRxPacket(&SX1278);
 8000706:	481a      	ldr	r0, [pc, #104]	@ (8000770 <main+0x118>)
 8000708:	f002 fdaf 	bl	800326a <SX1278_LoRaRxPacket>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <main+0x124>)
 8000712:	601a      	str	r2, [r3, #0]
	  printf("Received: %d\r\n", ret);
 8000714:	4b19      	ldr	r3, [pc, #100]	@ (800077c <main+0x124>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	481b      	ldr	r0, [pc, #108]	@ (8000788 <main+0x130>)
 800071c:	f002 ffb6 	bl	800368c <iprintf>
	  if (ret > 0) {
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <main+0x124>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dd0e      	ble.n	8000746 <main+0xee>
	  	 SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <main+0x124>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	4916      	ldr	r1, [pc, #88]	@ (800078c <main+0x134>)
 8000732:	480f      	ldr	r0, [pc, #60]	@ (8000770 <main+0x118>)
 8000734:	f002 fe0a 	bl	800334c <SX1278_read>
	  	 printf("Content (%d): %s\r\n", ret, buffer);
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <main+0x124>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <main+0x134>)
 800073e:	4619      	mov	r1, r3
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <main+0x138>)
 8000742:	f002 ffa3 	bl	800368c <iprintf>
	  }
	  printf("Package received ...\r\n");
 8000746:	4813      	ldr	r0, [pc, #76]	@ (8000794 <main+0x13c>)
 8000748:	f003 f808 	bl	800375c <puts>
	  printf("Slave ...\r\n");
 800074c:	e7d1      	b.n	80006f2 <main+0x9a>
 800074e:	bf00      	nop
 8000750:	19de5080 	.word	0x19de5080
 8000754:	00000000 	.word	0x00000000
 8000758:	08004458 	.word	0x08004458
 800075c:	20000124 	.word	0x20000124
 8000760:	40020400 	.word	0x40020400
 8000764:	40020000 	.word	0x40020000
 8000768:	40020800 	.word	0x40020800
 800076c:	20000084 	.word	0x20000084
 8000770:	20000140 	.word	0x20000140
 8000774:	08004468 	.word	0x08004468
 8000778:	08004484 	.word	0x08004484
 800077c:	20000258 	.word	0x20000258
 8000780:	080044a4 	.word	0x080044a4
 8000784:	080044b0 	.word	0x080044b0
 8000788:	080044c8 	.word	0x080044c8
 800078c:	2000025c 	.word	0x2000025c
 8000790:	080044d8 	.word	0x080044d8
 8000794:	080044ec 	.word	0x080044ec

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	@ 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 f8b8 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	@ (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007e4:	4a20      	ldr	r2, [pc, #128]	@ (8000868 <SystemClock_Config+0xd0>)
 80007e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000810:	2354      	movs	r3, #84	@ 0x54
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fdff 	bl	8001424 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800082c:	f000 f8c6 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2102      	movs	r1, #2
 800084c:	4618      	mov	r0, r3
 800084e:	f001 f861 	bl	8001914 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000858:	f000 f8b0 	bl	80009bc <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	@ 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	@ (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_SPI1_Init+0x64>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_SPI1_Init+0x64>)
 80008be:	f001 fa09 	bl	8001cd4 <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c8:	f000 f878 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000084 	.word	0x20000084
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <MX_USART1_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_USART1_UART_Init+0x4c>)
 8000910:	f001 fe40 	bl	8002594 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f84f 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000dc 	.word	0x200000dc
 8000928:	40011000 	.word	0x40011000

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <MX_GPIO_Init+0x68>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <MX_GPIO_Init+0x68>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_GPIO_Init+0x68>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80009a0:	1d39      	adds	r1, r7, #4
 80009a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009a6:	2201      	movs	r2, #1
 80009a8:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <__io_putchar+0x20>)
 80009aa:	f001 fe43 	bl	8002634 <HAL_UART_Transmit>

  return ch;
 80009ae:	687b      	ldr	r3, [r7, #4]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000dc 	.word	0x200000dc

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <init_spi1>:


#include "spi.h"

void init_spi1(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <init_spi1+0x64>)
 80009ce:	4a18      	ldr	r2, [pc, #96]	@ (8000a30 <init_spi1+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <init_spi1+0x64>)
 80009d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009d8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <init_spi1+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <init_spi1+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <init_spi1+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <init_spi1+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <init_spi1+0x64>)
 80009f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <init_spi1+0x64>)
 80009fc:	2218      	movs	r2, #24
 80009fe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <init_spi1+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <init_spi1+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <init_spi1+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <init_spi1+0x64>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	62da      	str	r2, [r3, #44]	@ 0x2c
//	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <init_spi1+0x64>)
 8000a1a:	f001 f95b 	bl	8001cd4 <HAL_SPI_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <init_spi1+0x60>
	{
	  Error_Handler();
 8000a24:	f7ff ffca 	bl	80009bc <Error_Handler>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	40013000 	.word	0x40013000

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	@ (8000b08 <HAL_SPI_MspInit+0x84>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12b      	bne.n	8000afe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <HAL_SPI_MspInit+0x88>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a17      	ldr	r2, [pc, #92]	@ (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ab0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a10      	ldr	r2, [pc, #64]	@ (8000b0c <HAL_SPI_MspInit+0x88>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ade:	23e0      	movs	r3, #224	@ 0xe0
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aee:	2305      	movs	r3, #5
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <HAL_SPI_MspInit+0x8c>)
 8000afa:	f000 fadd 	bl	80010b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	@ 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40013000 	.word	0x40013000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12c      	bne.n	8000b90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a17      	ldr	r2, [pc, #92]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b80:	2307      	movs	r3, #7
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b8c:	f000 fa94 	bl	80010b8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	@ 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f933 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e00a      	b.n	8000c2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c14:	f3af 8000 	nop.w
 8000c18:	4601      	mov	r1, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	60ba      	str	r2, [r7, #8]
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	dbf0      	blt.n	8000c14 <_read+0x12>
  }

  return len;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e009      	b.n	8000c62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe9e 	bl	8000998 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	dbf1      	blt.n	8000c4e <_write+0x12>
  }
  return len;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_close>:

int _close(int file)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_isatty>:

int _isatty(int file)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b085      	sub	sp, #20
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f002 fe54 	bl	80039b8 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20018000 	.word	0x20018000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	2000045c 	.word	0x2000045c
 8000d44:	200005b0 	.word	0x200005b0

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fe13 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fc5b 	bl	8000658 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000db0:	08004580 	.word	0x08004580
  ldr r2, =_sbss
 8000db4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000db8:	200005b0 	.word	0x200005b0

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f931 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe1e 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f93b 	bl	800109e <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f911 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000460 	.word	0x20000460

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000460 	.word	0x20000460

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	@ (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	@ (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	@ 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	@ 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	@ (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff47 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff5c 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb0 	bl	800100c <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e159      	b.n	8001388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8148 	bne.w	8001382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80a2 	beq.w	8001382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b57      	ldr	r3, [pc, #348]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a56      	ldr	r2, [pc, #344]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b54      	ldr	r3, [pc, #336]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a52      	ldr	r2, [pc, #328]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <HAL_GPIO_Init+0x2f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x202>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	@ (80013ac <HAL_GPIO_Init+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1fe>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a47      	ldr	r2, [pc, #284]	@ (80013b0 <HAL_GPIO_Init+0x2f8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1fa>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a46      	ldr	r2, [pc, #280]	@ (80013b4 <HAL_GPIO_Init+0x2fc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1f6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a45      	ldr	r2, [pc, #276]	@ (80013b8 <HAL_GPIO_Init+0x300>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1f2>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <HAL_GPIO_Init+0x304>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a2f      	ldr	r2, [pc, #188]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a24      	ldr	r2, [pc, #144]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1a      	ldr	r2, [pc, #104]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f aea2 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	@ 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e267      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d075      	beq.n	800152e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001442:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d00c      	beq.n	8001468 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b85      	ldr	r3, [pc, #532]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001456:	2b08      	cmp	r3, #8
 8001458:	d112      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b82      	ldr	r3, [pc, #520]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001466:	d10b      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b7e      	ldr	r3, [pc, #504]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d05b      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e242      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b76      	ldr	r3, [pc, #472]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b70      	ldr	r3, [pc, #448]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014bc:	4b69      	ldr	r3, [pc, #420]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a68      	ldr	r2, [pc, #416]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a65      	ldr	r2, [pc, #404]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fcd6 	bl	8000e8c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fcd2 	bl	8000e8c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e207      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fcc2 	bl	8000e8c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fcbe 	bl	8000e8c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1f3      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800153a:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b47      	ldr	r3, [pc, #284]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c7      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4937      	ldr	r1, [pc, #220]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <HAL_RCC_OscConfig+0x244>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fc77 	bl	8000e8c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc73 	bl	8000e8c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a8      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4925      	ldr	r1, [pc, #148]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <HAL_RCC_OscConfig+0x244>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc56 	bl	8000e8c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc52 	bl	8000e8c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e187      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d036      	beq.n	800167c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_RCC_OscConfig+0x248>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fc36 	bl	8000e8c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fc32 	bl	8000e8c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e167      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <HAL_RCC_OscConfig+0x240>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
 8001642:	e01b      	b.n	800167c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_RCC_OscConfig+0x248>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fc1f 	bl	8000e8c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00e      	b.n	8001670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fc1b 	bl	8000e8c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d907      	bls.n	8001670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e150      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	42470000 	.word	0x42470000
 800166c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ea      	bne.n	8001652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8097 	beq.w	80017b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b81      	ldr	r3, [pc, #516]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b7d      	ldr	r3, [pc, #500]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b77      	ldr	r3, [pc, #476]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b74      	ldr	r3, [pc, #464]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a73      	ldr	r2, [pc, #460]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbdb 	bl	8000e8c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fbd7 	bl	8000e8c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e10c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <HAL_RCC_OscConfig+0x474>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x2ea>
 8001700:	4b64      	ldr	r3, [pc, #400]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001704:	4a63      	ldr	r2, [pc, #396]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	@ 0x70
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x30c>
 8001716:	4b5f      	ldr	r3, [pc, #380]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171a:	4a5e      	ldr	r2, [pc, #376]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6713      	str	r3, [r2, #112]	@ 0x70
 8001722:	4b5c      	ldr	r3, [pc, #368]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	4a5b      	ldr	r2, [pc, #364]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	@ 0x70
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 8001730:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a57      	ldr	r2, [pc, #348]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	@ 0x70
 800173c:	4b55      	ldr	r3, [pc, #340]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	4a54      	ldr	r2, [pc, #336]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fb9c 	bl	8000e8c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb98 	bl	8000e8c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0cb      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	4b49      	ldr	r3, [pc, #292]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ee      	beq.n	8001758 <HAL_RCC_OscConfig+0x334>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fb86 	bl	8000e8c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fb82 	bl	8000e8c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0b5      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ee      	bne.n	8001784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b39      	ldr	r3, [pc, #228]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	4a38      	ldr	r2, [pc, #224]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a1 	beq.w	8001904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d05c      	beq.n	8001888 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d141      	bne.n	800185a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b31      	ldr	r3, [pc, #196]	@ (800189c <HAL_RCC_OscConfig+0x478>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb56 	bl	8000e8c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb52 	bl	8000e8c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e087      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	491b      	ldr	r1, [pc, #108]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x478>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fb2b 	bl	8000e8c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fb27 	bl	8000e8c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e05c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x416>
 8001858:	e054      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fb14 	bl	8000e8c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fb10 	bl	8000e8c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e045      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
 8001886:	e03d      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e038      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000
 800189c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x4ec>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d028      	beq.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d121      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11a      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	4293      	cmp	r3, r2
 80018da:	d111      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0cc      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b68      	ldr	r3, [pc, #416]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d90c      	bls.n	8001950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b63      	ldr	r3, [pc, #396]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a58      	ldr	r2, [pc, #352]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001980:	4b53      	ldr	r3, [pc, #332]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800198a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b50      	ldr	r3, [pc, #320]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	494d      	ldr	r1, [pc, #308]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d044      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d119      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e067      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b37      	ldr	r3, [pc, #220]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4934      	ldr	r1, [pc, #208]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa42 	bl	8000e8c <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa3e 	bl	8000e8c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e04f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20c      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4916      	ldr	r1, [pc, #88]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490e      	ldr	r1, [pc, #56]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f821 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490a      	ldr	r1, [pc, #40]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f9a2 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08004504 	.word	0x08004504
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b090      	sub	sp, #64	@ 0x40
 8001ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af8:	4b59      	ldr	r3, [pc, #356]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d00d      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x40>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f200 80a1 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b12:	e09b      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b18:	e09b      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b1e:	e098      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b4f      	ldr	r3, [pc, #316]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d028      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b4c:	fb03 f201 	mul.w	r2, r3, r1
 8001b50:	2300      	movs	r3, #0
 8001b52:	fb00 f303 	mul.w	r3, r0, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	4a43      	ldr	r2, [pc, #268]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b60:	460a      	mov	r2, r1
 8001b62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b66:	4413      	add	r3, r2
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	61fa      	str	r2, [r7, #28]
 8001b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b7a:	f7fe fb81 	bl	8000280 <__aeabi_uldivmod>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4613      	mov	r3, r2
 8001b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b86:	e053      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b88:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	2200      	movs	r2, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	617a      	str	r2, [r7, #20]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b9a:	f04f 0b00 	mov.w	fp, #0
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	465b      	mov	r3, fp
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bba:	eb63 090b 	sbc.w	r9, r3, fp
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	00eb      	lsls	r3, r5, #3
 8001be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be8:	00e2      	lsls	r2, r4, #3
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	eb14 030a 	adds.w	r3, r4, sl
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	eb45 030b 	adc.w	r3, r5, fp
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c06:	4629      	mov	r1, r5
 8001c08:	028b      	lsls	r3, r1, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c10:	4621      	mov	r1, r4
 8001c12:	028a      	lsls	r2, r1, #10
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	60fa      	str	r2, [r7, #12]
 8001c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c24:	f7fe fb2c 	bl	8000280 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3740      	adds	r7, #64	@ 0x40
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	017d7840 	.word	0x017d7840

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08004514 	.word	0x08004514

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffdc 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08004514 	.word	0x08004514

08001cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07b      	b.n	8001dde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cf6:	d009      	beq.n	8001d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	e005      	b.n	8001d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe feac 	bl	8000a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f003 0104 	and.w	r1, r3, #4
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	f003 0210 	and.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df6:	f7ff f849 	bl	8000e8c <HAL_GetTick>
 8001dfa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e12a      	b.n	8002066 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_SPI_Transmit+0x36>
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e122      	b.n	8002066 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_SPI_Transmit+0x48>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e11b      	b.n	8002066 <HAL_SPI_Transmit+0x280>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	88fa      	ldrh	r2, [r7, #6]
 8001e54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e7c:	d10f      	bne.n	8001e9e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea8:	2b40      	cmp	r3, #64	@ 0x40
 8001eaa:	d007      	beq.n	8001ebc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ec4:	d152      	bne.n	8001f6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_SPI_Transmit+0xee>
 8001ece:	8b7b      	ldrh	r3, [r7, #26]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d145      	bne.n	8001f60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	1c9a      	adds	r2, r3, #2
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ef8:	e032      	b.n	8001f60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d112      	bne.n	8001f2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	1c9a      	adds	r2, r3, #2
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f2c:	e018      	b.n	8001f60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f2e:	f7fe ffad 	bl	8000e8c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d803      	bhi.n	8001f46 <HAL_SPI_Transmit+0x160>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d102      	bne.n	8001f4c <HAL_SPI_Transmit+0x166>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e082      	b.n	8002066 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1c7      	bne.n	8001efa <HAL_SPI_Transmit+0x114>
 8001f6a:	e053      	b.n	8002014 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_SPI_Transmit+0x194>
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d147      	bne.n	800200a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fa0:	e033      	b.n	800200a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d113      	bne.n	8001fd8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001fd6:	e018      	b.n	800200a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd8:	f7fe ff58 	bl	8000e8c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d803      	bhi.n	8001ff0 <HAL_SPI_Transmit+0x20a>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	d102      	bne.n	8001ff6 <HAL_SPI_Transmit+0x210>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e02d      	b.n	8002066 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1c6      	bne.n	8001fa2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fa67 	bl	80024ec <SPI_EndRxTxTransaction>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002064:	2300      	movs	r3, #0
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b08a      	sub	sp, #40	@ 0x28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800207c:	2301      	movs	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002080:	f7fe ff04 	bl	8000e8c <HAL_GetTick>
 8002084:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800208c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00c      	beq.n	80020b8 <HAL_SPI_TransmitReceive+0x4a>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020a4:	d106      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x46>
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d001      	beq.n	80020b8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	e17f      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_SPI_TransmitReceive+0x5c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_TransmitReceive+0x5c>
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e174      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_SPI_TransmitReceive+0x6e>
 80020d8:	2302      	movs	r3, #2
 80020da:	e16d      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d003      	beq.n	80020f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2205      	movs	r2, #5
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	887a      	ldrh	r2, [r7, #2]
 800210e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b40      	cmp	r3, #64	@ 0x40
 800213a:	d007      	beq.n	800214c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002154:	d17e      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_SPI_TransmitReceive+0xf6>
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d16c      	bne.n	800223e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	1c9a      	adds	r2, r3, #2
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002188:	e059      	b.n	800223e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d11b      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x162>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x162>
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d113      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	1c9a      	adds	r2, r3, #2
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d119      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x1a4>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d014      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f2:	b292      	uxth	r2, r2
 80021f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800220e:	2301      	movs	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002212:	f7fe fe3b 	bl	8000e8c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800221e:	429a      	cmp	r2, r3
 8002220:	d80d      	bhi.n	800223e <HAL_SPI_TransmitReceive+0x1d0>
 8002222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d009      	beq.n	800223e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0bc      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1a0      	bne.n	800218a <HAL_SPI_TransmitReceive+0x11c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d19b      	bne.n	800218a <HAL_SPI_TransmitReceive+0x11c>
 8002252:	e082      	b.n	800235a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_SPI_TransmitReceive+0x1f4>
 800225c:	8afb      	ldrh	r3, [r7, #22]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d171      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	330c      	adds	r3, #12
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002288:	e05d      	b.n	8002346 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11c      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x264>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d017      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x264>
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d114      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d119      	bne.n	8002314 <HAL_SPI_TransmitReceive+0x2a6>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002314:	f7fe fdba 	bl	8000e8c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002320:	429a      	cmp	r2, r3
 8002322:	d803      	bhi.n	800232c <HAL_SPI_TransmitReceive+0x2be>
 8002324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d102      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x2c4>
 800232c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e038      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d19c      	bne.n	800228a <HAL_SPI_TransmitReceive+0x21c>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d197      	bne.n	800228a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8c4 	bl	80024ec <SPI_EndRxTxTransaction>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e01d      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3728      	adds	r7, #40	@ 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023ce:	b2db      	uxtb	r3, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023ec:	f7fe fd4e 	bl	8000e8c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023fc:	f7fe fd46 	bl	8000e8c <HAL_GetTick>
 8002400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002402:	4b39      	ldr	r3, [pc, #228]	@ (80024e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	0d1b      	lsrs	r3, r3, #20
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002412:	e054      	b.n	80024be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d050      	beq.n	80024be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800241c:	f7fe fd36 	bl	8000e8c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	429a      	cmp	r2, r3
 800242a:	d902      	bls.n	8002432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d13d      	bne.n	80024ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800244a:	d111      	bne.n	8002470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002454:	d004      	beq.n	8002460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245e:	d107      	bne.n	8002470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800246e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002478:	d10f      	bne.n	800249a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e017      	b.n	80024de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d19b      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000

080024ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2201      	movs	r2, #1
 8002500:	2102      	movs	r1, #2
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff ff6a 	bl	80023dc <SPI_WaitFlagStateUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e032      	b.n	8002584 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800251e:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <SPI_EndRxTxTransaction+0xa0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <SPI_EndRxTxTransaction+0xa4>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	0d5b      	lsrs	r3, r3, #21
 800252a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800253c:	d112      	bne.n	8002564 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff ff47 	bl	80023dc <SPI_WaitFlagStateUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d016      	beq.n	8002582 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e00f      	b.n	8002584 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3b01      	subs	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d0f2      	beq.n	8002564 <SPI_EndRxTxTransaction+0x78>
 800257e:	e000      	b.n	8002582 <SPI_EndRxTxTransaction+0x96>
        break;
 8002580:	bf00      	nop
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000000 	.word	0x20000000
 8002590:	165e9f81 	.word	0x165e9f81

08002594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e042      	b.n	800262c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe faaa 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	@ 0x24
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f973 	bl	80028c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800260c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b20      	cmp	r3, #32
 8002652:	d175      	bne.n	8002740 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Transmit+0x2c>
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e06e      	b.n	8002742 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2221      	movs	r2, #33	@ 0x21
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002672:	f7fe fc0b 	bl	8000e8c <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800268c:	d108      	bne.n	80026a0 <HAL_UART_Transmit+0x6c>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e003      	b.n	80026a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026a8:	e02e      	b.n	8002708 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2180      	movs	r1, #128	@ 0x80
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f848 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e03a      	b.n	8002742 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3302      	adds	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e007      	b.n	80026fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	3301      	adds	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1cb      	bne.n	80026aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	2140      	movs	r1, #64	@ 0x40
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f814 	bl	800274a <UART_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e006      	b.n	8002742 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275a:	e03b      	b.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d037      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002764:	f7fe fb92 	bl	8000e8c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	6a3a      	ldr	r2, [r7, #32]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <UART_WaitOnFlagUntilTimeout+0x30>
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e03a      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d023      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b80      	cmp	r3, #128	@ 0x80
 8002790:	d020      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b40      	cmp	r3, #64	@ 0x40
 8002796:	d01d      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d116      	bne.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f81d 	bl	80027fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2208      	movs	r2, #8
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e00f      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d0b4      	beq.n	800275c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b095      	sub	sp, #84	@ 0x54
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280e:	e853 3f00 	ldrex	r3, [r3]
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002824:	643a      	str	r2, [r7, #64]	@ 0x40
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800282a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800282c:	e841 2300 	strex	r3, r2, [r1]
 8002830:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e5      	bne.n	8002804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3314      	adds	r3, #20
 800283e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	e853 3f00 	ldrex	r3, [r3]
 8002846:	61fb      	str	r3, [r7, #28]
   return(result);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800285a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800285e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002860:	e841 2300 	strex	r3, r2, [r1]
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e5      	bne.n	8002838 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	2b01      	cmp	r3, #1
 8002872:	d119      	bne.n	80028a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	e853 3f00 	ldrex	r3, [r3]
 8002882:	60bb      	str	r3, [r7, #8]
   return(result);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f023 0310 	bic.w	r3, r3, #16
 800288a:	647b      	str	r3, [r7, #68]	@ 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002894:	61ba      	str	r2, [r7, #24]
 8002896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002898:	6979      	ldr	r1, [r7, #20]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	e841 2300 	strex	r3, r2, [r1]
 80028a0:	613b      	str	r3, [r7, #16]
   return(result);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e5      	bne.n	8002874 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028b6:	bf00      	nop
 80028b8:	3754      	adds	r7, #84	@ 0x54
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b0c0      	sub	sp, #256	@ 0x100
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	68d9      	ldr	r1, [r3, #12]
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	ea40 0301 	orr.w	r3, r0, r1
 80028ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	431a      	orrs	r2, r3
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800291c:	f021 010c 	bic.w	r1, r1, #12
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800292a:	430b      	orrs	r3, r1
 800292c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293e:	6999      	ldr	r1, [r3, #24]
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	ea40 0301 	orr.w	r3, r0, r1
 800294a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b8f      	ldr	r3, [pc, #572]	@ (8002b90 <UART_SetConfig+0x2cc>)
 8002954:	429a      	cmp	r2, r3
 8002956:	d005      	beq.n	8002964 <UART_SetConfig+0xa0>
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b94 <UART_SetConfig+0x2d0>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d104      	bne.n	800296e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002964:	f7ff f9a2 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8002968:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800296c:	e003      	b.n	8002976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296e:	f7ff f989 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8002972:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002980:	f040 810c 	bne.w	8002b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800298e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002996:	4622      	mov	r2, r4
 8002998:	462b      	mov	r3, r5
 800299a:	1891      	adds	r1, r2, r2
 800299c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800299e:	415b      	adcs	r3, r3
 80029a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029a6:	4621      	mov	r1, r4
 80029a8:	eb12 0801 	adds.w	r8, r2, r1
 80029ac:	4629      	mov	r1, r5
 80029ae:	eb43 0901 	adc.w	r9, r3, r1
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c6:	4690      	mov	r8, r2
 80029c8:	4699      	mov	r9, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	eb18 0303 	adds.w	r3, r8, r3
 80029d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029d4:	462b      	mov	r3, r5
 80029d6:	eb49 0303 	adc.w	r3, r9, r3
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029f2:	460b      	mov	r3, r1
 80029f4:	18db      	adds	r3, r3, r3
 80029f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f8:	4613      	mov	r3, r2
 80029fa:	eb42 0303 	adc.w	r3, r2, r3
 80029fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a08:	f7fd fc3a 	bl	8000280 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4b61      	ldr	r3, [pc, #388]	@ (8002b98 <UART_SetConfig+0x2d4>)
 8002a12:	fba3 2302 	umull	r2, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	011c      	lsls	r4, r3, #4
 8002a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	1891      	adds	r1, r2, r2
 8002a32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a34:	415b      	adcs	r3, r3
 8002a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a42:	4649      	mov	r1, r9
 8002a44:	eb43 0b01 	adc.w	fp, r3, r1
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a5c:	4692      	mov	sl, r2
 8002a5e:	469b      	mov	fp, r3
 8002a60:	4643      	mov	r3, r8
 8002a62:	eb1a 0303 	adds.w	r3, sl, r3
 8002a66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	18db      	adds	r3, r3, r3
 8002a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a8e:	4613      	mov	r3, r2
 8002a90:	eb42 0303 	adc.w	r3, r2, r3
 8002a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a9e:	f7fd fbef 	bl	8000280 <__aeabi_uldivmod>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <UART_SetConfig+0x2d4>)
 8002aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2264      	movs	r2, #100	@ 0x64
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	1acb      	subs	r3, r1, r3
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002abe:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <UART_SetConfig+0x2d4>)
 8002ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac4:	095b      	lsrs	r3, r3, #5
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002acc:	441c      	add	r4, r3
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	1891      	adds	r1, r2, r2
 8002ae6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ae8:	415b      	adcs	r3, r3
 8002aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002af0:	4641      	mov	r1, r8
 8002af2:	1851      	adds	r1, r2, r1
 8002af4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002af6:	4649      	mov	r1, r9
 8002af8:	414b      	adcs	r3, r1
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b08:	4659      	mov	r1, fp
 8002b0a:	00cb      	lsls	r3, r1, #3
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b12:	4651      	mov	r1, sl
 8002b14:	00ca      	lsls	r2, r1, #3
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b24:	464b      	mov	r3, r9
 8002b26:	460a      	mov	r2, r1
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b44:	460b      	mov	r3, r1
 8002b46:	18db      	adds	r3, r3, r3
 8002b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	eb42 0303 	adc.w	r3, r2, r3
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b5a:	f7fd fb91 	bl	8000280 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <UART_SetConfig+0x2d4>)
 8002b64:	fba3 1302 	umull	r1, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	2164      	movs	r1, #100	@ 0x64
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	3332      	adds	r3, #50	@ 0x32
 8002b76:	4a08      	ldr	r2, [pc, #32]	@ (8002b98 <UART_SetConfig+0x2d4>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 0207 	and.w	r2, r3, #7
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4422      	add	r2, r4
 8002b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b8c:	e106      	b.n	8002d9c <UART_SetConfig+0x4d8>
 8002b8e:	bf00      	nop
 8002b90:	40011000 	.word	0x40011000
 8002b94:	40011400 	.word	0x40011400
 8002b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bae:	4642      	mov	r2, r8
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	1891      	adds	r1, r2, r2
 8002bb4:	6239      	str	r1, [r7, #32]
 8002bb6:	415b      	adcs	r3, r3
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	1854      	adds	r4, r2, r1
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	eb43 0501 	adc.w	r5, r3, r1
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	00eb      	lsls	r3, r5, #3
 8002bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd6:	00e2      	lsls	r2, r4, #3
 8002bd8:	4614      	mov	r4, r2
 8002bda:	461d      	mov	r5, r3
 8002bdc:	4643      	mov	r3, r8
 8002bde:	18e3      	adds	r3, r4, r3
 8002be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002be4:	464b      	mov	r3, r9
 8002be6:	eb45 0303 	adc.w	r3, r5, r3
 8002bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	008b      	lsls	r3, r1, #2
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c14:	4621      	mov	r1, r4
 8002c16:	008a      	lsls	r2, r1, #2
 8002c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c1c:	f7fd fb30 	bl	8000280 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4b60      	ldr	r3, [pc, #384]	@ (8002da8 <UART_SetConfig+0x4e4>)
 8002c26:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	011c      	lsls	r4, r3, #4
 8002c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c40:	4642      	mov	r2, r8
 8002c42:	464b      	mov	r3, r9
 8002c44:	1891      	adds	r1, r2, r2
 8002c46:	61b9      	str	r1, [r7, #24]
 8002c48:	415b      	adcs	r3, r3
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c50:	4641      	mov	r1, r8
 8002c52:	1851      	adds	r1, r2, r1
 8002c54:	6139      	str	r1, [r7, #16]
 8002c56:	4649      	mov	r1, r9
 8002c58:	414b      	adcs	r3, r1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c68:	4659      	mov	r1, fp
 8002c6a:	00cb      	lsls	r3, r1, #3
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c72:	4651      	mov	r1, sl
 8002c74:	00ca      	lsls	r2, r1, #3
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c84:	464b      	mov	r3, r9
 8002c86:	460a      	mov	r2, r1
 8002c88:	eb42 0303 	adc.w	r3, r2, r3
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ca8:	4649      	mov	r1, r9
 8002caa:	008b      	lsls	r3, r1, #2
 8002cac:	4641      	mov	r1, r8
 8002cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	008a      	lsls	r2, r1, #2
 8002cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cba:	f7fd fae1 	bl	8000280 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4b38      	ldr	r3, [pc, #224]	@ (8002da8 <UART_SetConfig+0x4e4>)
 8002cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2264      	movs	r2, #100	@ 0x64
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	1acb      	subs	r3, r1, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	3332      	adds	r3, #50	@ 0x32
 8002cd8:	4a33      	ldr	r2, [pc, #204]	@ (8002da8 <UART_SetConfig+0x4e4>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce4:	441c      	add	r4, r3
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	1891      	adds	r1, r2, r2
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	415b      	adcs	r3, r3
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d04:	4641      	mov	r1, r8
 8002d06:	1851      	adds	r1, r2, r1
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	414b      	adcs	r3, r1
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	4651      	mov	r1, sl
 8002d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d26:	4651      	mov	r1, sl
 8002d28:	00ca      	lsls	r2, r1, #3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4642      	mov	r2, r8
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d36:	464b      	mov	r3, r9
 8002d38:	460a      	mov	r2, r1
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d58:	4649      	mov	r1, r9
 8002d5a:	008b      	lsls	r3, r1, #2
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d62:	4641      	mov	r1, r8
 8002d64:	008a      	lsls	r2, r1, #2
 8002d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d6a:	f7fd fa89 	bl	8000280 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <UART_SetConfig+0x4e4>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	@ 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	3332      	adds	r3, #50	@ 0x32
 8002d86:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <UART_SetConfig+0x4e4>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4422      	add	r2, r4
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002da2:	46bd      	mov	sp, r7
 8002da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da8:	51eb851f 	.word	0x51eb851f

08002dac <SX1278_SPIRead>:
 *  Created on: Oct 6, 2024
 *      Author: Phat
 */

#include "sx1278.hpp"
uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb39 	bl	8003438 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fb54 	bl	8003478 <SX1278_hw_SPIReadByte>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 faf1 	bl	80033c2 <SX1278_hw_SetNSS>
	return tmp;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	70fb      	strb	r3, [r7, #3]
 8002df6:	4613      	mov	r3, r2
 8002df8:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fade 	bl	80033c2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f000 fb0f 	bl	8003438 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78ba      	ldrb	r2, [r7, #2]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fb08 	bl	8003438 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fac7 	bl	80033c2 <SX1278_hw_SetNSS>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	461a      	mov	r2, r3
 8002e48:	460b      	mov	r3, r1
 8002e4a:	72fb      	strb	r3, [r7, #11]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8002e50:	7abb      	ldrb	r3, [r7, #10]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d927      	bls.n	8002ea6 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fab0 	bl	80033c2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	7afa      	ldrb	r2, [r7, #11]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fae4 	bl	8003438 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
 8002e74:	e00c      	b.n	8002e90 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	18d4      	adds	r4, r2, r3
 8002e80:	4608      	mov	r0, r1
 8002e82:	f000 faf9 	bl	8003478 <SX1278_hw_SPIReadByte>
 8002e86:	4603      	mov	r3, r0
 8002e88:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
 8002e90:	7dfa      	ldrb	r2, [r7, #23]
 8002e92:	7abb      	ldrb	r3, [r7, #10]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3ee      	bcc.n	8002e76 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fa8f 	bl	80033c2 <SX1278_hw_SetNSS>
 8002ea4:	e000      	b.n	8002ea8 <SX1278_SPIBurstRead+0x6c>
		return;
 8002ea6:	bf00      	nop
	}
}
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}

08002eae <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	460b      	mov	r3, r1
 8002ebc:	72fb      	strb	r3, [r7, #11]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8002ec2:	7abb      	ldrb	r3, [r7, #10]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d929      	bls.n	8002f1c <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa77 	bl	80033c2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	7afb      	ldrb	r3, [r7, #11]
 8002eda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 faa8 	bl	8003438 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
 8002eec:	e00b      	b.n	8002f06 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	f000 fa9c 	bl	8003438 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	3301      	adds	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	7abb      	ldrb	r3, [r7, #10]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3ef      	bcc.n	8002eee <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fa54 	bl	80033c2 <SX1278_hw_SetNSS>
 8002f1a:	e000      	b.n	8002f1e <SX1278_SPIBurstWrite+0x70>
		return;
 8002f1c:	bf00      	nop
	}
}
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f90d 	bl	800314c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002f32:	200f      	movs	r0, #15
 8002f34:	f000 fac6 	bl	80034c4 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f917 	bl	800316c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	04d9      	lsls	r1, r3, #19
 8002f4e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002f52:	04d0      	lsls	r0, r2, #19
 8002f54:	4a6f      	ldr	r2, [pc, #444]	@ (8003114 <SX1278_config+0x1f0>)
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f7fd f991 	bl	8000280 <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8002f66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	0c02      	lsrs	r2, r0, #16
 8002f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f78:	0c0b      	lsrs	r3, r1, #16
 8002f7a:	b2d3      	uxtb	r3, r2
 8002f7c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8002f7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	0a02      	lsrs	r2, r0, #8
 8002f8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f90:	0a0b      	lsrs	r3, r1, #8
 8002f92:	b2d3      	uxtb	r3, r2
 8002f94:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8002f96:	7c3b      	ldrb	r3, [r7, #16]
 8002f98:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8002f9a:	f107 020c 	add.w	r2, r7, #12
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	2106      	movs	r1, #6
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff83 	bl	8002eae <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8002fa8:	2234      	movs	r2, #52	@ 0x34
 8002faa:	2139      	movs	r1, #57	@ 0x39
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff1c 	bl	8002dea <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7c1b      	ldrb	r3, [r3, #16]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <SX1278_config+0x1f4>)
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff12 	bl	8002dea <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002fc6:	220b      	movs	r2, #11
 8002fc8:	210b      	movs	r1, #11
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ff0d 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002fd0:	2223      	movs	r2, #35	@ 0x23
 8002fd2:	210c      	movs	r1, #12
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff08 	bl	8002dea <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7c5b      	ldrb	r3, [r3, #17]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800311c <SX1278_config+0x1f8>)
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d147      	bne.n	8003078 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7c9b      	ldrb	r3, [r3, #18]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b4c      	ldr	r3, [pc, #304]	@ (8003120 <SX1278_config+0x1fc>)
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7cdb      	ldrb	r3, [r3, #19]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4b49      	ldr	r3, [pc, #292]	@ (8003124 <SX1278_config+0x200>)
 8002ffe:	5c5b      	ldrb	r3, [r3, r1]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4413      	add	r3, r2
 8003006:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003008:	3301      	adds	r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	211d      	movs	r1, #29
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff feea 	bl	8002dea <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7c5b      	ldrb	r3, [r3, #17]
 800301a:	461a      	mov	r2, r3
 800301c:	4b3f      	ldr	r3, [pc, #252]	@ (800311c <SX1278_config+0x1f8>)
 800301e:	5c9b      	ldrb	r3, [r3, r2]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7d1b      	ldrb	r3, [r3, #20]
 8003028:	4619      	mov	r1, r3
 800302a:	4b3f      	ldr	r3, [pc, #252]	@ (8003128 <SX1278_config+0x204>)
 800302c:	5c5b      	ldrb	r3, [r3, r1]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	b2db      	uxtb	r3, r3
 8003032:	4413      	add	r3, r2
 8003034:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003036:	3303      	adds	r3, #3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	211e      	movs	r1, #30
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fed3 	bl	8002dea <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8003044:	2131      	movs	r1, #49	@ 0x31
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff feb0 	bl	8002dac <SX1278_SPIRead>
 800304c:	4603      	mov	r3, r0
 800304e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	f043 0305 	orr.w	r3, r3, #5
 800305e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	461a      	mov	r2, r3
 8003064:	2131      	movs	r1, #49	@ 0x31
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff febf 	bl	8002dea <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800306c:	220c      	movs	r2, #12
 800306e:	2137      	movs	r1, #55	@ 0x37
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff feba 	bl	8002dea <SX1278_SPIWrite>
 8003076:	e029      	b.n	80030cc <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7c9b      	ldrb	r3, [r3, #18]
 800307c:	461a      	mov	r2, r3
 800307e:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <SX1278_config+0x1fc>)
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7cdb      	ldrb	r3, [r3, #19]
 800308a:	4619      	mov	r1, r3
 800308c:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <SX1278_config+0x200>)
 800308e:	5c5b      	ldrb	r3, [r3, r1]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003094:	4413      	add	r3, r2
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	211d      	movs	r1, #29
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fea4 	bl	8002dea <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7c5b      	ldrb	r3, [r3, #17]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <SX1278_config+0x1f8>)
 80030aa:	5c9b      	ldrb	r3, [r3, r2]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7d1b      	ldrb	r3, [r3, #20]
 80030b4:	4619      	mov	r1, r3
 80030b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <SX1278_config+0x204>)
 80030b8:	5c5b      	ldrb	r3, [r3, r1]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80030be:	4413      	add	r3, r2
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	211e      	movs	r1, #30
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff fe8f 	bl	8002dea <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80030cc:	2204      	movs	r2, #4
 80030ce:	2126      	movs	r1, #38	@ 0x26
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fe8a 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80030d6:	2208      	movs	r2, #8
 80030d8:	211f      	movs	r1, #31
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe85 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80030e0:	2200      	movs	r2, #0
 80030e2:	2120      	movs	r1, #32
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fe80 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80030ea:	2208      	movs	r2, #8
 80030ec:	2121      	movs	r1, #33	@ 0x21
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fe7b 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80030f4:	2201      	movs	r2, #1
 80030f6:	2141      	movs	r1, #65	@ 0x41
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fe76 	bl	8002dea <SX1278_SPIWrite>
	module->readBytes = 0;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f810 	bl	800312c <SX1278_standby>
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	01e84800 	.word	0x01e84800
 8003118:	0800451c 	.word	0x0800451c
 800311c:	08004520 	.word	0x08004520
 8003120:	08004528 	.word	0x08004528
 8003124:	08004534 	.word	0x08004534
 8003128:	08004538 	.word	0x08004538

0800312c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8003134:	2209      	movs	r2, #9
 8003136:	2101      	movs	r1, #1
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fe56 	bl	8002dea <SX1278_SPIWrite>
	module->status = STANDBY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	759a      	strb	r2, [r3, #22]
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8003154:	2208      	movs	r2, #8
 8003156:	2101      	movs	r1, #1
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fe46 	bl	8002dea <SX1278_SPIWrite>
	module->status = SLEEP;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	759a      	strb	r2, [r3, #22]
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8003174:	2288      	movs	r2, #136	@ 0x88
 8003176:	2101      	movs	r1, #1
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fe36 	bl	8002dea <SX1278_SPIWrite>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800318e:	22ff      	movs	r2, #255	@ 0xff
 8003190:	2112      	movs	r1, #18
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fe29 	bl	8002dea <SX1278_SPIWrite>
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	460b      	mov	r3, r1
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	7afa      	ldrb	r2, [r7, #11]
 80031b2:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff feb5 	bl	8002f24 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80031ba:	2284      	movs	r2, #132	@ 0x84
 80031bc:	214d      	movs	r1, #77	@ 0x4d
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fe13 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80031c4:	22ff      	movs	r2, #255	@ 0xff
 80031c6:	2124      	movs	r1, #36	@ 0x24
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fe0e 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80031ce:	2201      	movs	r2, #1
 80031d0:	2140      	movs	r1, #64	@ 0x40
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fe09 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80031d8:	223f      	movs	r2, #63	@ 0x3f
 80031da:	2111      	movs	r1, #17
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff fe04 	bl	8002dea <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff ffcf 	bl	8003186 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	461a      	mov	r2, r3
 80031ec:	2122      	movs	r1, #34	@ 0x22
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff fdfb 	bl	8002dea <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80031f4:	210f      	movs	r1, #15
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff fdd8 	bl	8002dac <SX1278_SPIRead>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	461a      	mov	r2, r3
 8003204:	210d      	movs	r1, #13
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fdef 	bl	8002dea <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800320c:	228d      	movs	r2, #141	@ 0x8d
 800320e:	2101      	movs	r1, #1
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff fdea 	bl	8002dea <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800321e:	2118      	movs	r1, #24
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff fdc3 	bl	8002dac <SX1278_SPIRead>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d104      	bne.n	800323a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2203      	movs	r2, #3
 8003234:	759a      	strb	r2, [r3, #22]
			return 1;
 8003236:	2301      	movs	r3, #1
 8003238:	e013      	b.n	8003262 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3b01      	subs	r3, #1
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f8d0 	bl	80033f0 <SX1278_hw_Reset>
			SX1278_config(module);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff fe67 	bl	8002f24 <SX1278_config>
			return 0;
 8003256:	2300      	movs	r3, #0
 8003258:	e003      	b.n	8003262 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800325a:	2001      	movs	r0, #1
 800325c:	f000 f932 	bl	80034c4 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8003260:	e7dd      	b.n	800321e <SX1278_LoRaEntryRx+0x7e>
	}
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f92f 	bl	80034da <SX1278_hw_GetDIO0>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d030      	beq.n	80032e4 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3317      	adds	r3, #23
 8003286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fb45 	bl	800391c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8003292:	2110      	movs	r1, #16
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fd89 	bl	8002dac <SX1278_SPIRead>
 800329a:	4603      	mov	r3, r0
 800329c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800329e:	7bbb      	ldrb	r3, [r7, #14]
 80032a0:	461a      	mov	r2, r3
 80032a2:	210d      	movs	r1, #13
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fda0 	bl	8002dea <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c5b      	ldrb	r3, [r3, #17]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7d5b      	ldrb	r3, [r3, #21]
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e005      	b.n	80032c6 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80032ba:	2113      	movs	r1, #19
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff fd75 	bl	8002dac <SX1278_SPIRead>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0217 	add.w	r2, r3, #23
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2100      	movs	r1, #0
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fdb3 	bl	8002e3c <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff51 	bl	8003186 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f848 	bl	8003398 <SX1278_hw_init>
	module->frequency = frequency;
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800330e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	7e3a      	ldrb	r2, [r7, #24]
 8003316:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7f3a      	ldrb	r2, [r7, #28]
 800331c:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003324:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800332c:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003334:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800333c:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fdf0 	bl	8002f24 <SX1278_config>
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8003360:	79fa      	ldrb	r2, [r7, #7]
 8003362:	429a      	cmp	r2, r3
 8003364:	d003      	beq.n	800336e <SX1278_read+0x22>
		length = module->readBytes;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800336c:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3317      	adds	r3, #23
 8003372:	79fa      	ldrb	r2, [r7, #7]
 8003374:	4619      	mov	r1, r3
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f000 fb4b 	bl	8003a12 <memcpy>
	rxBuf[length] = '\0';
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4413      	add	r3, r2
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 800338e:	79fb      	ldrb	r3, [r7, #7]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <SX1278_hw_init>:
 */

#include "sx1278_hw.hpp"
#include <string.h>

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80033a0:	2101      	movs	r1, #1
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f80d 	bl	80033c2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6858      	ldr	r0, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2201      	movs	r2, #1
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7fe f81b 	bl	80013f0 <HAL_GPIO_WritePin>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6958      	ldr	r0, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	b299      	uxth	r1, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	f7fe f804 	bl	80013f0 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80033f8:	2101      	movs	r1, #1
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ffe1 	bl	80033c2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6858      	ldr	r0, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	2200      	movs	r2, #0
 800340c:	4619      	mov	r1, r3
 800340e:	f7fd ffef 	bl	80013f0 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8003412:	2001      	movs	r0, #1
 8003414:	f000 f856 	bl	80034c4 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6858      	ldr	r0, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	2201      	movs	r2, #1
 8003424:	4619      	mov	r1, r3
 8003426:	f7fd ffe3 	bl	80013f0 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800342a:	2064      	movs	r0, #100	@ 0x64
 800342c:	f000 f84a 	bl	80034c4 <SX1278_hw_DelayMs>
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8003444:	2100      	movs	r1, #0
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ffbb 	bl	80033c2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6998      	ldr	r0, [r3, #24]
 8003450:	1cf9      	adds	r1, r7, #3
 8003452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003456:	2201      	movs	r2, #1
 8003458:	f7fe fcc5 	bl	8001de6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800345c:	bf00      	nop
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe ffac 	bl	80023c0 <HAL_SPI_GetState>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d1f7      	bne.n	800345e <SX1278_hw_SPICommand+0x26>
		;
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8003484:	2300      	movs	r3, #0
 8003486:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ff99 	bl	80033c2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6998      	ldr	r0, [r3, #24]
 8003494:	f107 020e 	add.w	r2, r7, #14
 8003498:	f107 010f 	add.w	r1, r7, #15
 800349c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2301      	movs	r3, #1
 80034a4:	f7fe fde3 	bl	800206e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80034a8:	bf00      	nop
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe ff86 	bl	80023c0 <HAL_SPI_GetState>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d1f7      	bne.n	80034aa <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fce9 	bl	8000ea4 <HAL_Delay>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f7fd ff66 	bl	80013c0 <HAL_GPIO_ReadPin>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <std>:
 8003508:	2300      	movs	r3, #0
 800350a:	b510      	push	{r4, lr}
 800350c:	4604      	mov	r4, r0
 800350e:	e9c0 3300 	strd	r3, r3, [r0]
 8003512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003516:	6083      	str	r3, [r0, #8]
 8003518:	8181      	strh	r1, [r0, #12]
 800351a:	6643      	str	r3, [r0, #100]	@ 0x64
 800351c:	81c2      	strh	r2, [r0, #14]
 800351e:	6183      	str	r3, [r0, #24]
 8003520:	4619      	mov	r1, r3
 8003522:	2208      	movs	r2, #8
 8003524:	305c      	adds	r0, #92	@ 0x5c
 8003526:	f000 f9f9 	bl	800391c <memset>
 800352a:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <std+0x58>)
 800352c:	6263      	str	r3, [r4, #36]	@ 0x24
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <std+0x5c>)
 8003530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <std+0x60>)
 8003534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <std+0x64>)
 8003538:	6323      	str	r3, [r4, #48]	@ 0x30
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <std+0x68>)
 800353c:	6224      	str	r4, [r4, #32]
 800353e:	429c      	cmp	r4, r3
 8003540:	d006      	beq.n	8003550 <std+0x48>
 8003542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003546:	4294      	cmp	r4, r2
 8003548:	d002      	beq.n	8003550 <std+0x48>
 800354a:	33d0      	adds	r3, #208	@ 0xd0
 800354c:	429c      	cmp	r4, r3
 800354e:	d105      	bne.n	800355c <std+0x54>
 8003550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003558:	f000 ba58 	b.w	8003a0c <__retarget_lock_init_recursive>
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop
 8003560:	0800376d 	.word	0x0800376d
 8003564:	0800378f 	.word	0x0800378f
 8003568:	080037c7 	.word	0x080037c7
 800356c:	080037eb 	.word	0x080037eb
 8003570:	20000464 	.word	0x20000464

08003574 <stdio_exit_handler>:
 8003574:	4a02      	ldr	r2, [pc, #8]	@ (8003580 <stdio_exit_handler+0xc>)
 8003576:	4903      	ldr	r1, [pc, #12]	@ (8003584 <stdio_exit_handler+0x10>)
 8003578:	4803      	ldr	r0, [pc, #12]	@ (8003588 <stdio_exit_handler+0x14>)
 800357a:	f000 b869 	b.w	8003650 <_fwalk_sglue>
 800357e:	bf00      	nop
 8003580:	2000000c 	.word	0x2000000c
 8003584:	080042c9 	.word	0x080042c9
 8003588:	2000001c 	.word	0x2000001c

0800358c <cleanup_stdio>:
 800358c:	6841      	ldr	r1, [r0, #4]
 800358e:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <cleanup_stdio+0x34>)
 8003590:	4299      	cmp	r1, r3
 8003592:	b510      	push	{r4, lr}
 8003594:	4604      	mov	r4, r0
 8003596:	d001      	beq.n	800359c <cleanup_stdio+0x10>
 8003598:	f000 fe96 	bl	80042c8 <_fflush_r>
 800359c:	68a1      	ldr	r1, [r4, #8]
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <cleanup_stdio+0x38>)
 80035a0:	4299      	cmp	r1, r3
 80035a2:	d002      	beq.n	80035aa <cleanup_stdio+0x1e>
 80035a4:	4620      	mov	r0, r4
 80035a6:	f000 fe8f 	bl	80042c8 <_fflush_r>
 80035aa:	68e1      	ldr	r1, [r4, #12]
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <cleanup_stdio+0x3c>)
 80035ae:	4299      	cmp	r1, r3
 80035b0:	d004      	beq.n	80035bc <cleanup_stdio+0x30>
 80035b2:	4620      	mov	r0, r4
 80035b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b8:	f000 be86 	b.w	80042c8 <_fflush_r>
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	bf00      	nop
 80035c0:	20000464 	.word	0x20000464
 80035c4:	200004cc 	.word	0x200004cc
 80035c8:	20000534 	.word	0x20000534

080035cc <global_stdio_init.part.0>:
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <global_stdio_init.part.0+0x30>)
 80035d0:	4c0b      	ldr	r4, [pc, #44]	@ (8003600 <global_stdio_init.part.0+0x34>)
 80035d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003604 <global_stdio_init.part.0+0x38>)
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	4620      	mov	r0, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	2104      	movs	r1, #4
 80035dc:	f7ff ff94 	bl	8003508 <std>
 80035e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035e4:	2201      	movs	r2, #1
 80035e6:	2109      	movs	r1, #9
 80035e8:	f7ff ff8e 	bl	8003508 <std>
 80035ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035f0:	2202      	movs	r2, #2
 80035f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f6:	2112      	movs	r1, #18
 80035f8:	f7ff bf86 	b.w	8003508 <std>
 80035fc:	2000059c 	.word	0x2000059c
 8003600:	20000464 	.word	0x20000464
 8003604:	08003575 	.word	0x08003575

08003608 <__sfp_lock_acquire>:
 8003608:	4801      	ldr	r0, [pc, #4]	@ (8003610 <__sfp_lock_acquire+0x8>)
 800360a:	f000 ba00 	b.w	8003a0e <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	200005a5 	.word	0x200005a5

08003614 <__sfp_lock_release>:
 8003614:	4801      	ldr	r0, [pc, #4]	@ (800361c <__sfp_lock_release+0x8>)
 8003616:	f000 b9fb 	b.w	8003a10 <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	200005a5 	.word	0x200005a5

08003620 <__sinit>:
 8003620:	b510      	push	{r4, lr}
 8003622:	4604      	mov	r4, r0
 8003624:	f7ff fff0 	bl	8003608 <__sfp_lock_acquire>
 8003628:	6a23      	ldr	r3, [r4, #32]
 800362a:	b11b      	cbz	r3, 8003634 <__sinit+0x14>
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003630:	f7ff bff0 	b.w	8003614 <__sfp_lock_release>
 8003634:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <__sinit+0x28>)
 8003636:	6223      	str	r3, [r4, #32]
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <__sinit+0x2c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f5      	bne.n	800362c <__sinit+0xc>
 8003640:	f7ff ffc4 	bl	80035cc <global_stdio_init.part.0>
 8003644:	e7f2      	b.n	800362c <__sinit+0xc>
 8003646:	bf00      	nop
 8003648:	0800358d 	.word	0x0800358d
 800364c:	2000059c 	.word	0x2000059c

08003650 <_fwalk_sglue>:
 8003650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003654:	4607      	mov	r7, r0
 8003656:	4688      	mov	r8, r1
 8003658:	4614      	mov	r4, r2
 800365a:	2600      	movs	r6, #0
 800365c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003660:	f1b9 0901 	subs.w	r9, r9, #1
 8003664:	d505      	bpl.n	8003672 <_fwalk_sglue+0x22>
 8003666:	6824      	ldr	r4, [r4, #0]
 8003668:	2c00      	cmp	r4, #0
 800366a:	d1f7      	bne.n	800365c <_fwalk_sglue+0xc>
 800366c:	4630      	mov	r0, r6
 800366e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003672:	89ab      	ldrh	r3, [r5, #12]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d907      	bls.n	8003688 <_fwalk_sglue+0x38>
 8003678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800367c:	3301      	adds	r3, #1
 800367e:	d003      	beq.n	8003688 <_fwalk_sglue+0x38>
 8003680:	4629      	mov	r1, r5
 8003682:	4638      	mov	r0, r7
 8003684:	47c0      	blx	r8
 8003686:	4306      	orrs	r6, r0
 8003688:	3568      	adds	r5, #104	@ 0x68
 800368a:	e7e9      	b.n	8003660 <_fwalk_sglue+0x10>

0800368c <iprintf>:
 800368c:	b40f      	push	{r0, r1, r2, r3}
 800368e:	b507      	push	{r0, r1, r2, lr}
 8003690:	4906      	ldr	r1, [pc, #24]	@ (80036ac <iprintf+0x20>)
 8003692:	ab04      	add	r3, sp, #16
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	f853 2b04 	ldr.w	r2, [r3], #4
 800369a:	6881      	ldr	r1, [r0, #8]
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	f000 fae9 	bl	8003c74 <_vfiprintf_r>
 80036a2:	b003      	add	sp, #12
 80036a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036a8:	b004      	add	sp, #16
 80036aa:	4770      	bx	lr
 80036ac:	20000018 	.word	0x20000018

080036b0 <_puts_r>:
 80036b0:	6a03      	ldr	r3, [r0, #32]
 80036b2:	b570      	push	{r4, r5, r6, lr}
 80036b4:	6884      	ldr	r4, [r0, #8]
 80036b6:	4605      	mov	r5, r0
 80036b8:	460e      	mov	r6, r1
 80036ba:	b90b      	cbnz	r3, 80036c0 <_puts_r+0x10>
 80036bc:	f7ff ffb0 	bl	8003620 <__sinit>
 80036c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036c2:	07db      	lsls	r3, r3, #31
 80036c4:	d405      	bmi.n	80036d2 <_puts_r+0x22>
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	0598      	lsls	r0, r3, #22
 80036ca:	d402      	bmi.n	80036d2 <_puts_r+0x22>
 80036cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ce:	f000 f99e 	bl	8003a0e <__retarget_lock_acquire_recursive>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	0719      	lsls	r1, r3, #28
 80036d6:	d502      	bpl.n	80036de <_puts_r+0x2e>
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d135      	bne.n	800374a <_puts_r+0x9a>
 80036de:	4621      	mov	r1, r4
 80036e0:	4628      	mov	r0, r5
 80036e2:	f000 f8c5 	bl	8003870 <__swsetup_r>
 80036e6:	b380      	cbz	r0, 800374a <_puts_r+0x9a>
 80036e8:	f04f 35ff 	mov.w	r5, #4294967295
 80036ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ee:	07da      	lsls	r2, r3, #31
 80036f0:	d405      	bmi.n	80036fe <_puts_r+0x4e>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	059b      	lsls	r3, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_puts_r+0x4e>
 80036f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036fa:	f000 f989 	bl	8003a10 <__retarget_lock_release_recursive>
 80036fe:	4628      	mov	r0, r5
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	2b00      	cmp	r3, #0
 8003704:	da04      	bge.n	8003710 <_puts_r+0x60>
 8003706:	69a2      	ldr	r2, [r4, #24]
 8003708:	429a      	cmp	r2, r3
 800370a:	dc17      	bgt.n	800373c <_puts_r+0x8c>
 800370c:	290a      	cmp	r1, #10
 800370e:	d015      	beq.n	800373c <_puts_r+0x8c>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	6022      	str	r2, [r4, #0]
 8003716:	7019      	strb	r1, [r3, #0]
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800371e:	3b01      	subs	r3, #1
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	2900      	cmp	r1, #0
 8003724:	d1ed      	bne.n	8003702 <_puts_r+0x52>
 8003726:	2b00      	cmp	r3, #0
 8003728:	da11      	bge.n	800374e <_puts_r+0x9e>
 800372a:	4622      	mov	r2, r4
 800372c:	210a      	movs	r1, #10
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f85f 	bl	80037f2 <__swbuf_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d0d7      	beq.n	80036e8 <_puts_r+0x38>
 8003738:	250a      	movs	r5, #10
 800373a:	e7d7      	b.n	80036ec <_puts_r+0x3c>
 800373c:	4622      	mov	r2, r4
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f857 	bl	80037f2 <__swbuf_r>
 8003744:	3001      	adds	r0, #1
 8003746:	d1e7      	bne.n	8003718 <_puts_r+0x68>
 8003748:	e7ce      	b.n	80036e8 <_puts_r+0x38>
 800374a:	3e01      	subs	r6, #1
 800374c:	e7e4      	b.n	8003718 <_puts_r+0x68>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	220a      	movs	r2, #10
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	e7ee      	b.n	8003738 <_puts_r+0x88>
	...

0800375c <puts>:
 800375c:	4b02      	ldr	r3, [pc, #8]	@ (8003768 <puts+0xc>)
 800375e:	4601      	mov	r1, r0
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	f7ff bfa5 	b.w	80036b0 <_puts_r>
 8003766:	bf00      	nop
 8003768:	20000018 	.word	0x20000018

0800376c <__sread>:
 800376c:	b510      	push	{r4, lr}
 800376e:	460c      	mov	r4, r1
 8003770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003774:	f000 f8fc 	bl	8003970 <_read_r>
 8003778:	2800      	cmp	r0, #0
 800377a:	bfab      	itete	ge
 800377c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800377e:	89a3      	ldrhlt	r3, [r4, #12]
 8003780:	181b      	addge	r3, r3, r0
 8003782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003786:	bfac      	ite	ge
 8003788:	6563      	strge	r3, [r4, #84]	@ 0x54
 800378a:	81a3      	strhlt	r3, [r4, #12]
 800378c:	bd10      	pop	{r4, pc}

0800378e <__swrite>:
 800378e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003792:	461f      	mov	r7, r3
 8003794:	898b      	ldrh	r3, [r1, #12]
 8003796:	05db      	lsls	r3, r3, #23
 8003798:	4605      	mov	r5, r0
 800379a:	460c      	mov	r4, r1
 800379c:	4616      	mov	r6, r2
 800379e:	d505      	bpl.n	80037ac <__swrite+0x1e>
 80037a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a4:	2302      	movs	r3, #2
 80037a6:	2200      	movs	r2, #0
 80037a8:	f000 f8d0 	bl	800394c <_lseek_r>
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037b6:	81a3      	strh	r3, [r4, #12]
 80037b8:	4632      	mov	r2, r6
 80037ba:	463b      	mov	r3, r7
 80037bc:	4628      	mov	r0, r5
 80037be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037c2:	f000 b8e7 	b.w	8003994 <_write_r>

080037c6 <__sseek>:
 80037c6:	b510      	push	{r4, lr}
 80037c8:	460c      	mov	r4, r1
 80037ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ce:	f000 f8bd 	bl	800394c <_lseek_r>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	bf15      	itete	ne
 80037d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037e2:	81a3      	strheq	r3, [r4, #12]
 80037e4:	bf18      	it	ne
 80037e6:	81a3      	strhne	r3, [r4, #12]
 80037e8:	bd10      	pop	{r4, pc}

080037ea <__sclose>:
 80037ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ee:	f000 b89d 	b.w	800392c <_close_r>

080037f2 <__swbuf_r>:
 80037f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f4:	460e      	mov	r6, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	4605      	mov	r5, r0
 80037fa:	b118      	cbz	r0, 8003804 <__swbuf_r+0x12>
 80037fc:	6a03      	ldr	r3, [r0, #32]
 80037fe:	b90b      	cbnz	r3, 8003804 <__swbuf_r+0x12>
 8003800:	f7ff ff0e 	bl	8003620 <__sinit>
 8003804:	69a3      	ldr	r3, [r4, #24]
 8003806:	60a3      	str	r3, [r4, #8]
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	071a      	lsls	r2, r3, #28
 800380c:	d501      	bpl.n	8003812 <__swbuf_r+0x20>
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	b943      	cbnz	r3, 8003824 <__swbuf_r+0x32>
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f82b 	bl	8003870 <__swsetup_r>
 800381a:	b118      	cbz	r0, 8003824 <__swbuf_r+0x32>
 800381c:	f04f 37ff 	mov.w	r7, #4294967295
 8003820:	4638      	mov	r0, r7
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	6922      	ldr	r2, [r4, #16]
 8003828:	1a98      	subs	r0, r3, r2
 800382a:	6963      	ldr	r3, [r4, #20]
 800382c:	b2f6      	uxtb	r6, r6
 800382e:	4283      	cmp	r3, r0
 8003830:	4637      	mov	r7, r6
 8003832:	dc05      	bgt.n	8003840 <__swbuf_r+0x4e>
 8003834:	4621      	mov	r1, r4
 8003836:	4628      	mov	r0, r5
 8003838:	f000 fd46 	bl	80042c8 <_fflush_r>
 800383c:	2800      	cmp	r0, #0
 800383e:	d1ed      	bne.n	800381c <__swbuf_r+0x2a>
 8003840:	68a3      	ldr	r3, [r4, #8]
 8003842:	3b01      	subs	r3, #1
 8003844:	60a3      	str	r3, [r4, #8]
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	6022      	str	r2, [r4, #0]
 800384c:	701e      	strb	r6, [r3, #0]
 800384e:	6962      	ldr	r2, [r4, #20]
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	429a      	cmp	r2, r3
 8003854:	d004      	beq.n	8003860 <__swbuf_r+0x6e>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	07db      	lsls	r3, r3, #31
 800385a:	d5e1      	bpl.n	8003820 <__swbuf_r+0x2e>
 800385c:	2e0a      	cmp	r6, #10
 800385e:	d1df      	bne.n	8003820 <__swbuf_r+0x2e>
 8003860:	4621      	mov	r1, r4
 8003862:	4628      	mov	r0, r5
 8003864:	f000 fd30 	bl	80042c8 <_fflush_r>
 8003868:	2800      	cmp	r0, #0
 800386a:	d0d9      	beq.n	8003820 <__swbuf_r+0x2e>
 800386c:	e7d6      	b.n	800381c <__swbuf_r+0x2a>
	...

08003870 <__swsetup_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <__swsetup_r+0xa8>)
 8003874:	4605      	mov	r5, r0
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	460c      	mov	r4, r1
 800387a:	b118      	cbz	r0, 8003884 <__swsetup_r+0x14>
 800387c:	6a03      	ldr	r3, [r0, #32]
 800387e:	b90b      	cbnz	r3, 8003884 <__swsetup_r+0x14>
 8003880:	f7ff fece 	bl	8003620 <__sinit>
 8003884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003888:	0719      	lsls	r1, r3, #28
 800388a:	d422      	bmi.n	80038d2 <__swsetup_r+0x62>
 800388c:	06da      	lsls	r2, r3, #27
 800388e:	d407      	bmi.n	80038a0 <__swsetup_r+0x30>
 8003890:	2209      	movs	r2, #9
 8003892:	602a      	str	r2, [r5, #0]
 8003894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	e033      	b.n	8003908 <__swsetup_r+0x98>
 80038a0:	0758      	lsls	r0, r3, #29
 80038a2:	d512      	bpl.n	80038ca <__swsetup_r+0x5a>
 80038a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038a6:	b141      	cbz	r1, 80038ba <__swsetup_r+0x4a>
 80038a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d002      	beq.n	80038b6 <__swsetup_r+0x46>
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f8bd 	bl	8003a30 <_free_r>
 80038b6:	2300      	movs	r3, #0
 80038b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038c0:	81a3      	strh	r3, [r4, #12]
 80038c2:	2300      	movs	r3, #0
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	81a3      	strh	r3, [r4, #12]
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	b94b      	cbnz	r3, 80038ea <__swsetup_r+0x7a>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e0:	d003      	beq.n	80038ea <__swsetup_r+0x7a>
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 fd3d 	bl	8004364 <__smakebuf_r>
 80038ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ee:	f013 0201 	ands.w	r2, r3, #1
 80038f2:	d00a      	beq.n	800390a <__swsetup_r+0x9a>
 80038f4:	2200      	movs	r2, #0
 80038f6:	60a2      	str	r2, [r4, #8]
 80038f8:	6962      	ldr	r2, [r4, #20]
 80038fa:	4252      	negs	r2, r2
 80038fc:	61a2      	str	r2, [r4, #24]
 80038fe:	6922      	ldr	r2, [r4, #16]
 8003900:	b942      	cbnz	r2, 8003914 <__swsetup_r+0xa4>
 8003902:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003906:	d1c5      	bne.n	8003894 <__swsetup_r+0x24>
 8003908:	bd38      	pop	{r3, r4, r5, pc}
 800390a:	0799      	lsls	r1, r3, #30
 800390c:	bf58      	it	pl
 800390e:	6962      	ldrpl	r2, [r4, #20]
 8003910:	60a2      	str	r2, [r4, #8]
 8003912:	e7f4      	b.n	80038fe <__swsetup_r+0x8e>
 8003914:	2000      	movs	r0, #0
 8003916:	e7f7      	b.n	8003908 <__swsetup_r+0x98>
 8003918:	20000018 	.word	0x20000018

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_close_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4d06      	ldr	r5, [pc, #24]	@ (8003948 <_close_r+0x1c>)
 8003930:	2300      	movs	r3, #0
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	f7fd f99c 	bl	8000c74 <_close>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_close_r+0x1a>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_close_r+0x1a>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	200005a0 	.word	0x200005a0

0800394c <_lseek_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d07      	ldr	r5, [pc, #28]	@ (800396c <_lseek_r+0x20>)
 8003950:	4604      	mov	r4, r0
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	2200      	movs	r2, #0
 8003958:	602a      	str	r2, [r5, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fd f9b1 	bl	8000cc2 <_lseek>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_lseek_r+0x1e>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_lseek_r+0x1e>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	200005a0 	.word	0x200005a0

08003970 <_read_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4d07      	ldr	r5, [pc, #28]	@ (8003990 <_read_r+0x20>)
 8003974:	4604      	mov	r4, r0
 8003976:	4608      	mov	r0, r1
 8003978:	4611      	mov	r1, r2
 800397a:	2200      	movs	r2, #0
 800397c:	602a      	str	r2, [r5, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	f7fd f93f 	bl	8000c02 <_read>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d102      	bne.n	800398e <_read_r+0x1e>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	b103      	cbz	r3, 800398e <_read_r+0x1e>
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	200005a0 	.word	0x200005a0

08003994 <_write_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4d07      	ldr	r5, [pc, #28]	@ (80039b4 <_write_r+0x20>)
 8003998:	4604      	mov	r4, r0
 800399a:	4608      	mov	r0, r1
 800399c:	4611      	mov	r1, r2
 800399e:	2200      	movs	r2, #0
 80039a0:	602a      	str	r2, [r5, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f7fd f94a 	bl	8000c3c <_write>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d102      	bne.n	80039b2 <_write_r+0x1e>
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	b103      	cbz	r3, 80039b2 <_write_r+0x1e>
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	200005a0 	.word	0x200005a0

080039b8 <__errno>:
 80039b8:	4b01      	ldr	r3, [pc, #4]	@ (80039c0 <__errno+0x8>)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000018 	.word	0x20000018

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4d0d      	ldr	r5, [pc, #52]	@ (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2600      	movs	r6, #0
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 fd32 	bl	8004440 <_init>
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2600      	movs	r6, #0
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08004578 	.word	0x08004578
 8003a00:	08004578 	.word	0x08004578
 8003a04:	08004578 	.word	0x08004578
 8003a08:	0800457c 	.word	0x0800457c

08003a0c <__retarget_lock_init_recursive>:
 8003a0c:	4770      	bx	lr

08003a0e <__retarget_lock_acquire_recursive>:
 8003a0e:	4770      	bx	lr

08003a10 <__retarget_lock_release_recursive>:
 8003a10:	4770      	bx	lr

08003a12 <memcpy>:
 8003a12:	440a      	add	r2, r1
 8003a14:	4291      	cmp	r1, r2
 8003a16:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a1a:	d100      	bne.n	8003a1e <memcpy+0xc>
 8003a1c:	4770      	bx	lr
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a28:	4291      	cmp	r1, r2
 8003a2a:	d1f9      	bne.n	8003a20 <memcpy+0xe>
 8003a2c:	bd10      	pop	{r4, pc}
	...

08003a30 <_free_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4605      	mov	r5, r0
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d041      	beq.n	8003abc <_free_r+0x8c>
 8003a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3c:	1f0c      	subs	r4, r1, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfb8      	it	lt
 8003a42:	18e4      	addlt	r4, r4, r3
 8003a44:	f000 f8e0 	bl	8003c08 <__malloc_lock>
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <_free_r+0x90>)
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	b933      	cbnz	r3, 8003a5c <_free_r+0x2c>
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	6014      	str	r4, [r2, #0]
 8003a52:	4628      	mov	r0, r5
 8003a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a58:	f000 b8dc 	b.w	8003c14 <__malloc_unlock>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d908      	bls.n	8003a72 <_free_r+0x42>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	1821      	adds	r1, r4, r0
 8003a64:	428b      	cmp	r3, r1
 8003a66:	bf01      	itttt	eq
 8003a68:	6819      	ldreq	r1, [r3, #0]
 8003a6a:	685b      	ldreq	r3, [r3, #4]
 8003a6c:	1809      	addeq	r1, r1, r0
 8003a6e:	6021      	streq	r1, [r4, #0]
 8003a70:	e7ed      	b.n	8003a4e <_free_r+0x1e>
 8003a72:	461a      	mov	r2, r3
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	b10b      	cbz	r3, 8003a7c <_free_r+0x4c>
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d9fa      	bls.n	8003a72 <_free_r+0x42>
 8003a7c:	6811      	ldr	r1, [r2, #0]
 8003a7e:	1850      	adds	r0, r2, r1
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d10b      	bne.n	8003a9c <_free_r+0x6c>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	4401      	add	r1, r0
 8003a88:	1850      	adds	r0, r2, r1
 8003a8a:	4283      	cmp	r3, r0
 8003a8c:	6011      	str	r1, [r2, #0]
 8003a8e:	d1e0      	bne.n	8003a52 <_free_r+0x22>
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6053      	str	r3, [r2, #4]
 8003a96:	4408      	add	r0, r1
 8003a98:	6010      	str	r0, [r2, #0]
 8003a9a:	e7da      	b.n	8003a52 <_free_r+0x22>
 8003a9c:	d902      	bls.n	8003aa4 <_free_r+0x74>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	e7d6      	b.n	8003a52 <_free_r+0x22>
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	1821      	adds	r1, r4, r0
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	bf04      	itt	eq
 8003aac:	6819      	ldreq	r1, [r3, #0]
 8003aae:	685b      	ldreq	r3, [r3, #4]
 8003ab0:	6063      	str	r3, [r4, #4]
 8003ab2:	bf04      	itt	eq
 8003ab4:	1809      	addeq	r1, r1, r0
 8003ab6:	6021      	streq	r1, [r4, #0]
 8003ab8:	6054      	str	r4, [r2, #4]
 8003aba:	e7ca      	b.n	8003a52 <_free_r+0x22>
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	200005ac 	.word	0x200005ac

08003ac4 <sbrk_aligned>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8003b04 <sbrk_aligned+0x40>)
 8003ac8:	460c      	mov	r4, r1
 8003aca:	6831      	ldr	r1, [r6, #0]
 8003acc:	4605      	mov	r5, r0
 8003ace:	b911      	cbnz	r1, 8003ad6 <sbrk_aligned+0x12>
 8003ad0:	f000 fca6 	bl	8004420 <_sbrk_r>
 8003ad4:	6030      	str	r0, [r6, #0]
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f000 fca1 	bl	8004420 <_sbrk_r>
 8003ade:	1c43      	adds	r3, r0, #1
 8003ae0:	d103      	bne.n	8003aea <sbrk_aligned+0x26>
 8003ae2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	bd70      	pop	{r4, r5, r6, pc}
 8003aea:	1cc4      	adds	r4, r0, #3
 8003aec:	f024 0403 	bic.w	r4, r4, #3
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d0f8      	beq.n	8003ae6 <sbrk_aligned+0x22>
 8003af4:	1a21      	subs	r1, r4, r0
 8003af6:	4628      	mov	r0, r5
 8003af8:	f000 fc92 	bl	8004420 <_sbrk_r>
 8003afc:	3001      	adds	r0, #1
 8003afe:	d1f2      	bne.n	8003ae6 <sbrk_aligned+0x22>
 8003b00:	e7ef      	b.n	8003ae2 <sbrk_aligned+0x1e>
 8003b02:	bf00      	nop
 8003b04:	200005a8 	.word	0x200005a8

08003b08 <_malloc_r>:
 8003b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b0c:	1ccd      	adds	r5, r1, #3
 8003b0e:	f025 0503 	bic.w	r5, r5, #3
 8003b12:	3508      	adds	r5, #8
 8003b14:	2d0c      	cmp	r5, #12
 8003b16:	bf38      	it	cc
 8003b18:	250c      	movcc	r5, #12
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	4606      	mov	r6, r0
 8003b1e:	db01      	blt.n	8003b24 <_malloc_r+0x1c>
 8003b20:	42a9      	cmp	r1, r5
 8003b22:	d904      	bls.n	8003b2e <_malloc_r+0x26>
 8003b24:	230c      	movs	r3, #12
 8003b26:	6033      	str	r3, [r6, #0]
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c04 <_malloc_r+0xfc>
 8003b32:	f000 f869 	bl	8003c08 <__malloc_lock>
 8003b36:	f8d8 3000 	ldr.w	r3, [r8]
 8003b3a:	461c      	mov	r4, r3
 8003b3c:	bb44      	cbnz	r4, 8003b90 <_malloc_r+0x88>
 8003b3e:	4629      	mov	r1, r5
 8003b40:	4630      	mov	r0, r6
 8003b42:	f7ff ffbf 	bl	8003ac4 <sbrk_aligned>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	4604      	mov	r4, r0
 8003b4a:	d158      	bne.n	8003bfe <_malloc_r+0xf6>
 8003b4c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b50:	4627      	mov	r7, r4
 8003b52:	2f00      	cmp	r7, #0
 8003b54:	d143      	bne.n	8003bde <_malloc_r+0xd6>
 8003b56:	2c00      	cmp	r4, #0
 8003b58:	d04b      	beq.n	8003bf2 <_malloc_r+0xea>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	4639      	mov	r1, r7
 8003b5e:	4630      	mov	r0, r6
 8003b60:	eb04 0903 	add.w	r9, r4, r3
 8003b64:	f000 fc5c 	bl	8004420 <_sbrk_r>
 8003b68:	4581      	cmp	r9, r0
 8003b6a:	d142      	bne.n	8003bf2 <_malloc_r+0xea>
 8003b6c:	6821      	ldr	r1, [r4, #0]
 8003b6e:	1a6d      	subs	r5, r5, r1
 8003b70:	4629      	mov	r1, r5
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7ff ffa6 	bl	8003ac4 <sbrk_aligned>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d03a      	beq.n	8003bf2 <_malloc_r+0xea>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	442b      	add	r3, r5
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	f8d8 3000 	ldr.w	r3, [r8]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	bb62      	cbnz	r2, 8003be4 <_malloc_r+0xdc>
 8003b8a:	f8c8 7000 	str.w	r7, [r8]
 8003b8e:	e00f      	b.n	8003bb0 <_malloc_r+0xa8>
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	1b52      	subs	r2, r2, r5
 8003b94:	d420      	bmi.n	8003bd8 <_malloc_r+0xd0>
 8003b96:	2a0b      	cmp	r2, #11
 8003b98:	d917      	bls.n	8003bca <_malloc_r+0xc2>
 8003b9a:	1961      	adds	r1, r4, r5
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	6025      	str	r5, [r4, #0]
 8003ba0:	bf18      	it	ne
 8003ba2:	6059      	strne	r1, [r3, #4]
 8003ba4:	6863      	ldr	r3, [r4, #4]
 8003ba6:	bf08      	it	eq
 8003ba8:	f8c8 1000 	streq.w	r1, [r8]
 8003bac:	5162      	str	r2, [r4, r5]
 8003bae:	604b      	str	r3, [r1, #4]
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f82f 	bl	8003c14 <__malloc_unlock>
 8003bb6:	f104 000b 	add.w	r0, r4, #11
 8003bba:	1d23      	adds	r3, r4, #4
 8003bbc:	f020 0007 	bic.w	r0, r0, #7
 8003bc0:	1ac2      	subs	r2, r0, r3
 8003bc2:	bf1c      	itt	ne
 8003bc4:	1a1b      	subne	r3, r3, r0
 8003bc6:	50a3      	strne	r3, [r4, r2]
 8003bc8:	e7af      	b.n	8003b2a <_malloc_r+0x22>
 8003bca:	6862      	ldr	r2, [r4, #4]
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	bf0c      	ite	eq
 8003bd0:	f8c8 2000 	streq.w	r2, [r8]
 8003bd4:	605a      	strne	r2, [r3, #4]
 8003bd6:	e7eb      	b.n	8003bb0 <_malloc_r+0xa8>
 8003bd8:	4623      	mov	r3, r4
 8003bda:	6864      	ldr	r4, [r4, #4]
 8003bdc:	e7ae      	b.n	8003b3c <_malloc_r+0x34>
 8003bde:	463c      	mov	r4, r7
 8003be0:	687f      	ldr	r7, [r7, #4]
 8003be2:	e7b6      	b.n	8003b52 <_malloc_r+0x4a>
 8003be4:	461a      	mov	r2, r3
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	d1fb      	bne.n	8003be4 <_malloc_r+0xdc>
 8003bec:	2300      	movs	r3, #0
 8003bee:	6053      	str	r3, [r2, #4]
 8003bf0:	e7de      	b.n	8003bb0 <_malloc_r+0xa8>
 8003bf2:	230c      	movs	r3, #12
 8003bf4:	6033      	str	r3, [r6, #0]
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f80c 	bl	8003c14 <__malloc_unlock>
 8003bfc:	e794      	b.n	8003b28 <_malloc_r+0x20>
 8003bfe:	6005      	str	r5, [r0, #0]
 8003c00:	e7d6      	b.n	8003bb0 <_malloc_r+0xa8>
 8003c02:	bf00      	nop
 8003c04:	200005ac 	.word	0x200005ac

08003c08 <__malloc_lock>:
 8003c08:	4801      	ldr	r0, [pc, #4]	@ (8003c10 <__malloc_lock+0x8>)
 8003c0a:	f7ff bf00 	b.w	8003a0e <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	200005a4 	.word	0x200005a4

08003c14 <__malloc_unlock>:
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <__malloc_unlock+0x8>)
 8003c16:	f7ff befb 	b.w	8003a10 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	200005a4 	.word	0x200005a4

08003c20 <__sfputc_r>:
 8003c20:	6893      	ldr	r3, [r2, #8]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	b410      	push	{r4}
 8003c28:	6093      	str	r3, [r2, #8]
 8003c2a:	da08      	bge.n	8003c3e <__sfputc_r+0x1e>
 8003c2c:	6994      	ldr	r4, [r2, #24]
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	db01      	blt.n	8003c36 <__sfputc_r+0x16>
 8003c32:	290a      	cmp	r1, #10
 8003c34:	d103      	bne.n	8003c3e <__sfputc_r+0x1e>
 8003c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c3a:	f7ff bdda 	b.w	80037f2 <__swbuf_r>
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	1c58      	adds	r0, r3, #1
 8003c42:	6010      	str	r0, [r2, #0]
 8003c44:	7019      	strb	r1, [r3, #0]
 8003c46:	4608      	mov	r0, r1
 8003c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <__sfputs_r>:
 8003c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c50:	4606      	mov	r6, r0
 8003c52:	460f      	mov	r7, r1
 8003c54:	4614      	mov	r4, r2
 8003c56:	18d5      	adds	r5, r2, r3
 8003c58:	42ac      	cmp	r4, r5
 8003c5a:	d101      	bne.n	8003c60 <__sfputs_r+0x12>
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	e007      	b.n	8003c70 <__sfputs_r+0x22>
 8003c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c64:	463a      	mov	r2, r7
 8003c66:	4630      	mov	r0, r6
 8003c68:	f7ff ffda 	bl	8003c20 <__sfputc_r>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d1f3      	bne.n	8003c58 <__sfputs_r+0xa>
 8003c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c74 <_vfiprintf_r>:
 8003c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c78:	460d      	mov	r5, r1
 8003c7a:	b09d      	sub	sp, #116	@ 0x74
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	4698      	mov	r8, r3
 8003c80:	4606      	mov	r6, r0
 8003c82:	b118      	cbz	r0, 8003c8c <_vfiprintf_r+0x18>
 8003c84:	6a03      	ldr	r3, [r0, #32]
 8003c86:	b90b      	cbnz	r3, 8003c8c <_vfiprintf_r+0x18>
 8003c88:	f7ff fcca 	bl	8003620 <__sinit>
 8003c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c8e:	07d9      	lsls	r1, r3, #31
 8003c90:	d405      	bmi.n	8003c9e <_vfiprintf_r+0x2a>
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	059a      	lsls	r2, r3, #22
 8003c96:	d402      	bmi.n	8003c9e <_vfiprintf_r+0x2a>
 8003c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c9a:	f7ff feb8 	bl	8003a0e <__retarget_lock_acquire_recursive>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	071b      	lsls	r3, r3, #28
 8003ca2:	d501      	bpl.n	8003ca8 <_vfiprintf_r+0x34>
 8003ca4:	692b      	ldr	r3, [r5, #16]
 8003ca6:	b99b      	cbnz	r3, 8003cd0 <_vfiprintf_r+0x5c>
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4630      	mov	r0, r6
 8003cac:	f7ff fde0 	bl	8003870 <__swsetup_r>
 8003cb0:	b170      	cbz	r0, 8003cd0 <_vfiprintf_r+0x5c>
 8003cb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cb4:	07dc      	lsls	r4, r3, #31
 8003cb6:	d504      	bpl.n	8003cc2 <_vfiprintf_r+0x4e>
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	b01d      	add	sp, #116	@ 0x74
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	0598      	lsls	r0, r3, #22
 8003cc6:	d4f7      	bmi.n	8003cb8 <_vfiprintf_r+0x44>
 8003cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cca:	f7ff fea1 	bl	8003a10 <__retarget_lock_release_recursive>
 8003cce:	e7f3      	b.n	8003cb8 <_vfiprintf_r+0x44>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cde:	2330      	movs	r3, #48	@ 0x30
 8003ce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003e90 <_vfiprintf_r+0x21c>
 8003ce4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ce8:	f04f 0901 	mov.w	r9, #1
 8003cec:	4623      	mov	r3, r4
 8003cee:	469a      	mov	sl, r3
 8003cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cf4:	b10a      	cbz	r2, 8003cfa <_vfiprintf_r+0x86>
 8003cf6:	2a25      	cmp	r2, #37	@ 0x25
 8003cf8:	d1f9      	bne.n	8003cee <_vfiprintf_r+0x7a>
 8003cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8003cfe:	d00b      	beq.n	8003d18 <_vfiprintf_r+0xa4>
 8003d00:	465b      	mov	r3, fp
 8003d02:	4622      	mov	r2, r4
 8003d04:	4629      	mov	r1, r5
 8003d06:	4630      	mov	r0, r6
 8003d08:	f7ff ffa1 	bl	8003c4e <__sfputs_r>
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	f000 80a7 	beq.w	8003e60 <_vfiprintf_r+0x1ec>
 8003d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d14:	445a      	add	r2, fp
 8003d16:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d18:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 809f 	beq.w	8003e60 <_vfiprintf_r+0x1ec>
 8003d22:	2300      	movs	r3, #0
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295
 8003d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d2c:	f10a 0a01 	add.w	sl, sl, #1
 8003d30:	9304      	str	r3, [sp, #16]
 8003d32:	9307      	str	r3, [sp, #28]
 8003d34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d38:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d3a:	4654      	mov	r4, sl
 8003d3c:	2205      	movs	r2, #5
 8003d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d42:	4853      	ldr	r0, [pc, #332]	@ (8003e90 <_vfiprintf_r+0x21c>)
 8003d44:	f7fc fa4c 	bl	80001e0 <memchr>
 8003d48:	9a04      	ldr	r2, [sp, #16]
 8003d4a:	b9d8      	cbnz	r0, 8003d84 <_vfiprintf_r+0x110>
 8003d4c:	06d1      	lsls	r1, r2, #27
 8003d4e:	bf44      	itt	mi
 8003d50:	2320      	movmi	r3, #32
 8003d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d56:	0713      	lsls	r3, r2, #28
 8003d58:	bf44      	itt	mi
 8003d5a:	232b      	movmi	r3, #43	@ 0x2b
 8003d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d60:	f89a 3000 	ldrb.w	r3, [sl]
 8003d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d66:	d015      	beq.n	8003d94 <_vfiprintf_r+0x120>
 8003d68:	9a07      	ldr	r2, [sp, #28]
 8003d6a:	4654      	mov	r4, sl
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f04f 0c0a 	mov.w	ip, #10
 8003d72:	4621      	mov	r1, r4
 8003d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d78:	3b30      	subs	r3, #48	@ 0x30
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	d94b      	bls.n	8003e16 <_vfiprintf_r+0x1a2>
 8003d7e:	b1b0      	cbz	r0, 8003dae <_vfiprintf_r+0x13a>
 8003d80:	9207      	str	r2, [sp, #28]
 8003d82:	e014      	b.n	8003dae <_vfiprintf_r+0x13a>
 8003d84:	eba0 0308 	sub.w	r3, r0, r8
 8003d88:	fa09 f303 	lsl.w	r3, r9, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	46a2      	mov	sl, r4
 8003d92:	e7d2      	b.n	8003d3a <_vfiprintf_r+0xc6>
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	1d19      	adds	r1, r3, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	9103      	str	r1, [sp, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bfbb      	ittet	lt
 8003da0:	425b      	neglt	r3, r3
 8003da2:	f042 0202 	orrlt.w	r2, r2, #2
 8003da6:	9307      	strge	r3, [sp, #28]
 8003da8:	9307      	strlt	r3, [sp, #28]
 8003daa:	bfb8      	it	lt
 8003dac:	9204      	strlt	r2, [sp, #16]
 8003dae:	7823      	ldrb	r3, [r4, #0]
 8003db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003db2:	d10a      	bne.n	8003dca <_vfiprintf_r+0x156>
 8003db4:	7863      	ldrb	r3, [r4, #1]
 8003db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db8:	d132      	bne.n	8003e20 <_vfiprintf_r+0x1ac>
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	9203      	str	r2, [sp, #12]
 8003dc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dc6:	3402      	adds	r4, #2
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ea0 <_vfiprintf_r+0x22c>
 8003dce:	7821      	ldrb	r1, [r4, #0]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	4650      	mov	r0, sl
 8003dd4:	f7fc fa04 	bl	80001e0 <memchr>
 8003dd8:	b138      	cbz	r0, 8003dea <_vfiprintf_r+0x176>
 8003dda:	9b04      	ldr	r3, [sp, #16]
 8003ddc:	eba0 000a 	sub.w	r0, r0, sl
 8003de0:	2240      	movs	r2, #64	@ 0x40
 8003de2:	4082      	lsls	r2, r0
 8003de4:	4313      	orrs	r3, r2
 8003de6:	3401      	adds	r4, #1
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dee:	4829      	ldr	r0, [pc, #164]	@ (8003e94 <_vfiprintf_r+0x220>)
 8003df0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003df4:	2206      	movs	r2, #6
 8003df6:	f7fc f9f3 	bl	80001e0 <memchr>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d03f      	beq.n	8003e7e <_vfiprintf_r+0x20a>
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <_vfiprintf_r+0x224>)
 8003e00:	bb1b      	cbnz	r3, 8003e4a <_vfiprintf_r+0x1d6>
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	3307      	adds	r3, #7
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	9303      	str	r3, [sp, #12]
 8003e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e10:	443b      	add	r3, r7
 8003e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e14:	e76a      	b.n	8003cec <_vfiprintf_r+0x78>
 8003e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	e7a8      	b.n	8003d72 <_vfiprintf_r+0xfe>
 8003e20:	2300      	movs	r3, #0
 8003e22:	3401      	adds	r4, #1
 8003e24:	9305      	str	r3, [sp, #20]
 8003e26:	4619      	mov	r1, r3
 8003e28:	f04f 0c0a 	mov.w	ip, #10
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e32:	3a30      	subs	r2, #48	@ 0x30
 8003e34:	2a09      	cmp	r2, #9
 8003e36:	d903      	bls.n	8003e40 <_vfiprintf_r+0x1cc>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0c6      	beq.n	8003dca <_vfiprintf_r+0x156>
 8003e3c:	9105      	str	r1, [sp, #20]
 8003e3e:	e7c4      	b.n	8003dca <_vfiprintf_r+0x156>
 8003e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e44:	4604      	mov	r4, r0
 8003e46:	2301      	movs	r3, #1
 8003e48:	e7f0      	b.n	8003e2c <_vfiprintf_r+0x1b8>
 8003e4a:	ab03      	add	r3, sp, #12
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	462a      	mov	r2, r5
 8003e50:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <_vfiprintf_r+0x228>)
 8003e52:	a904      	add	r1, sp, #16
 8003e54:	4630      	mov	r0, r6
 8003e56:	f3af 8000 	nop.w
 8003e5a:	4607      	mov	r7, r0
 8003e5c:	1c78      	adds	r0, r7, #1
 8003e5e:	d1d6      	bne.n	8003e0e <_vfiprintf_r+0x19a>
 8003e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e62:	07d9      	lsls	r1, r3, #31
 8003e64:	d405      	bmi.n	8003e72 <_vfiprintf_r+0x1fe>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	059a      	lsls	r2, r3, #22
 8003e6a:	d402      	bmi.n	8003e72 <_vfiprintf_r+0x1fe>
 8003e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e6e:	f7ff fdcf 	bl	8003a10 <__retarget_lock_release_recursive>
 8003e72:	89ab      	ldrh	r3, [r5, #12]
 8003e74:	065b      	lsls	r3, r3, #25
 8003e76:	f53f af1f 	bmi.w	8003cb8 <_vfiprintf_r+0x44>
 8003e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e7c:	e71e      	b.n	8003cbc <_vfiprintf_r+0x48>
 8003e7e:	ab03      	add	r3, sp, #12
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	462a      	mov	r2, r5
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <_vfiprintf_r+0x228>)
 8003e86:	a904      	add	r1, sp, #16
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f000 f879 	bl	8003f80 <_printf_i>
 8003e8e:	e7e4      	b.n	8003e5a <_vfiprintf_r+0x1e6>
 8003e90:	0800453a 	.word	0x0800453a
 8003e94:	08004544 	.word	0x08004544
 8003e98:	00000000 	.word	0x00000000
 8003e9c:	08003c4f 	.word	0x08003c4f
 8003ea0:	08004540 	.word	0x08004540

08003ea4 <_printf_common>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	4698      	mov	r8, r3
 8003eac:	688a      	ldr	r2, [r1, #8]
 8003eae:	690b      	ldr	r3, [r1, #16]
 8003eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bfb8      	it	lt
 8003eb8:	4613      	movlt	r3, r2
 8003eba:	6033      	str	r3, [r6, #0]
 8003ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	b10a      	cbz	r2, 8003eca <_printf_common+0x26>
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	6033      	str	r3, [r6, #0]
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	0699      	lsls	r1, r3, #26
 8003ece:	bf42      	ittt	mi
 8003ed0:	6833      	ldrmi	r3, [r6, #0]
 8003ed2:	3302      	addmi	r3, #2
 8003ed4:	6033      	strmi	r3, [r6, #0]
 8003ed6:	6825      	ldr	r5, [r4, #0]
 8003ed8:	f015 0506 	ands.w	r5, r5, #6
 8003edc:	d106      	bne.n	8003eec <_printf_common+0x48>
 8003ede:	f104 0a19 	add.w	sl, r4, #25
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	6832      	ldr	r2, [r6, #0]
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	42ab      	cmp	r3, r5
 8003eea:	dc26      	bgt.n	8003f3a <_printf_common+0x96>
 8003eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	3b00      	subs	r3, #0
 8003ef4:	bf18      	it	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	0692      	lsls	r2, r2, #26
 8003efa:	d42b      	bmi.n	8003f54 <_printf_common+0xb0>
 8003efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f00:	4641      	mov	r1, r8
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c8      	blx	r9
 8003f06:	3001      	adds	r0, #1
 8003f08:	d01e      	beq.n	8003f48 <_printf_common+0xa4>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	bf02      	ittt	eq
 8003f16:	68e5      	ldreq	r5, [r4, #12]
 8003f18:	6833      	ldreq	r3, [r6, #0]
 8003f1a:	1aed      	subeq	r5, r5, r3
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	bf0c      	ite	eq
 8003f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f24:	2500      	movne	r5, #0
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bfc4      	itt	gt
 8003f2a:	1a9b      	subgt	r3, r3, r2
 8003f2c:	18ed      	addgt	r5, r5, r3
 8003f2e:	2600      	movs	r6, #0
 8003f30:	341a      	adds	r4, #26
 8003f32:	42b5      	cmp	r5, r6
 8003f34:	d11a      	bne.n	8003f6c <_printf_common+0xc8>
 8003f36:	2000      	movs	r0, #0
 8003f38:	e008      	b.n	8003f4c <_printf_common+0xa8>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4652      	mov	r2, sl
 8003f3e:	4641      	mov	r1, r8
 8003f40:	4638      	mov	r0, r7
 8003f42:	47c8      	blx	r9
 8003f44:	3001      	adds	r0, #1
 8003f46:	d103      	bne.n	8003f50 <_printf_common+0xac>
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f50:	3501      	adds	r5, #1
 8003f52:	e7c6      	b.n	8003ee2 <_printf_common+0x3e>
 8003f54:	18e1      	adds	r1, r4, r3
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	2030      	movs	r0, #48	@ 0x30
 8003f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f5e:	4422      	add	r2, r4
 8003f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f68:	3302      	adds	r3, #2
 8003f6a:	e7c7      	b.n	8003efc <_printf_common+0x58>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4622      	mov	r2, r4
 8003f70:	4641      	mov	r1, r8
 8003f72:	4638      	mov	r0, r7
 8003f74:	47c8      	blx	r9
 8003f76:	3001      	adds	r0, #1
 8003f78:	d0e6      	beq.n	8003f48 <_printf_common+0xa4>
 8003f7a:	3601      	adds	r6, #1
 8003f7c:	e7d9      	b.n	8003f32 <_printf_common+0x8e>
	...

08003f80 <_printf_i>:
 8003f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	7e0f      	ldrb	r7, [r1, #24]
 8003f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f88:	2f78      	cmp	r7, #120	@ 0x78
 8003f8a:	4691      	mov	r9, r2
 8003f8c:	4680      	mov	r8, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	469a      	mov	sl, r3
 8003f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f96:	d807      	bhi.n	8003fa8 <_printf_i+0x28>
 8003f98:	2f62      	cmp	r7, #98	@ 0x62
 8003f9a:	d80a      	bhi.n	8003fb2 <_printf_i+0x32>
 8003f9c:	2f00      	cmp	r7, #0
 8003f9e:	f000 80d2 	beq.w	8004146 <_printf_i+0x1c6>
 8003fa2:	2f58      	cmp	r7, #88	@ 0x58
 8003fa4:	f000 80b9 	beq.w	800411a <_printf_i+0x19a>
 8003fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fb0:	e03a      	b.n	8004028 <_printf_i+0xa8>
 8003fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fb6:	2b15      	cmp	r3, #21
 8003fb8:	d8f6      	bhi.n	8003fa8 <_printf_i+0x28>
 8003fba:	a101      	add	r1, pc, #4	@ (adr r1, 8003fc0 <_printf_i+0x40>)
 8003fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	0800402d 	.word	0x0800402d
 8003fc8:	08003fa9 	.word	0x08003fa9
 8003fcc:	08003fa9 	.word	0x08003fa9
 8003fd0:	08003fa9 	.word	0x08003fa9
 8003fd4:	08003fa9 	.word	0x08003fa9
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	08003fa9 	.word	0x08003fa9
 8003fe0:	08003fa9 	.word	0x08003fa9
 8003fe4:	08003fa9 	.word	0x08003fa9
 8003fe8:	08003fa9 	.word	0x08003fa9
 8003fec:	0800412d 	.word	0x0800412d
 8003ff0:	08004057 	.word	0x08004057
 8003ff4:	080040e7 	.word	0x080040e7
 8003ff8:	08003fa9 	.word	0x08003fa9
 8003ffc:	08003fa9 	.word	0x08003fa9
 8004000:	0800414f 	.word	0x0800414f
 8004004:	08003fa9 	.word	0x08003fa9
 8004008:	08004057 	.word	0x08004057
 800400c:	08003fa9 	.word	0x08003fa9
 8004010:	08003fa9 	.word	0x08003fa9
 8004014:	080040ef 	.word	0x080040ef
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6032      	str	r2, [r6, #0]
 8004020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004028:	2301      	movs	r3, #1
 800402a:	e09d      	b.n	8004168 <_printf_i+0x1e8>
 800402c:	6833      	ldr	r3, [r6, #0]
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	1d19      	adds	r1, r3, #4
 8004032:	6031      	str	r1, [r6, #0]
 8004034:	0606      	lsls	r6, r0, #24
 8004036:	d501      	bpl.n	800403c <_printf_i+0xbc>
 8004038:	681d      	ldr	r5, [r3, #0]
 800403a:	e003      	b.n	8004044 <_printf_i+0xc4>
 800403c:	0645      	lsls	r5, r0, #25
 800403e:	d5fb      	bpl.n	8004038 <_printf_i+0xb8>
 8004040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004044:	2d00      	cmp	r5, #0
 8004046:	da03      	bge.n	8004050 <_printf_i+0xd0>
 8004048:	232d      	movs	r3, #45	@ 0x2d
 800404a:	426d      	negs	r5, r5
 800404c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004050:	4859      	ldr	r0, [pc, #356]	@ (80041b8 <_printf_i+0x238>)
 8004052:	230a      	movs	r3, #10
 8004054:	e011      	b.n	800407a <_printf_i+0xfa>
 8004056:	6821      	ldr	r1, [r4, #0]
 8004058:	6833      	ldr	r3, [r6, #0]
 800405a:	0608      	lsls	r0, r1, #24
 800405c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004060:	d402      	bmi.n	8004068 <_printf_i+0xe8>
 8004062:	0649      	lsls	r1, r1, #25
 8004064:	bf48      	it	mi
 8004066:	b2ad      	uxthmi	r5, r5
 8004068:	2f6f      	cmp	r7, #111	@ 0x6f
 800406a:	4853      	ldr	r0, [pc, #332]	@ (80041b8 <_printf_i+0x238>)
 800406c:	6033      	str	r3, [r6, #0]
 800406e:	bf14      	ite	ne
 8004070:	230a      	movne	r3, #10
 8004072:	2308      	moveq	r3, #8
 8004074:	2100      	movs	r1, #0
 8004076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800407a:	6866      	ldr	r6, [r4, #4]
 800407c:	60a6      	str	r6, [r4, #8]
 800407e:	2e00      	cmp	r6, #0
 8004080:	bfa2      	ittt	ge
 8004082:	6821      	ldrge	r1, [r4, #0]
 8004084:	f021 0104 	bicge.w	r1, r1, #4
 8004088:	6021      	strge	r1, [r4, #0]
 800408a:	b90d      	cbnz	r5, 8004090 <_printf_i+0x110>
 800408c:	2e00      	cmp	r6, #0
 800408e:	d04b      	beq.n	8004128 <_printf_i+0x1a8>
 8004090:	4616      	mov	r6, r2
 8004092:	fbb5 f1f3 	udiv	r1, r5, r3
 8004096:	fb03 5711 	mls	r7, r3, r1, r5
 800409a:	5dc7      	ldrb	r7, [r0, r7]
 800409c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040a0:	462f      	mov	r7, r5
 80040a2:	42bb      	cmp	r3, r7
 80040a4:	460d      	mov	r5, r1
 80040a6:	d9f4      	bls.n	8004092 <_printf_i+0x112>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d10b      	bne.n	80040c4 <_printf_i+0x144>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	07df      	lsls	r7, r3, #31
 80040b0:	d508      	bpl.n	80040c4 <_printf_i+0x144>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	6861      	ldr	r1, [r4, #4]
 80040b6:	4299      	cmp	r1, r3
 80040b8:	bfde      	ittt	le
 80040ba:	2330      	movle	r3, #48	@ 0x30
 80040bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040c4:	1b92      	subs	r2, r2, r6
 80040c6:	6122      	str	r2, [r4, #16]
 80040c8:	f8cd a000 	str.w	sl, [sp]
 80040cc:	464b      	mov	r3, r9
 80040ce:	aa03      	add	r2, sp, #12
 80040d0:	4621      	mov	r1, r4
 80040d2:	4640      	mov	r0, r8
 80040d4:	f7ff fee6 	bl	8003ea4 <_printf_common>
 80040d8:	3001      	adds	r0, #1
 80040da:	d14a      	bne.n	8004172 <_printf_i+0x1f2>
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	b004      	add	sp, #16
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	f043 0320 	orr.w	r3, r3, #32
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	4833      	ldr	r0, [pc, #204]	@ (80041bc <_printf_i+0x23c>)
 80040f0:	2778      	movs	r7, #120	@ 0x78
 80040f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	6831      	ldr	r1, [r6, #0]
 80040fa:	061f      	lsls	r7, r3, #24
 80040fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004100:	d402      	bmi.n	8004108 <_printf_i+0x188>
 8004102:	065f      	lsls	r7, r3, #25
 8004104:	bf48      	it	mi
 8004106:	b2ad      	uxthmi	r5, r5
 8004108:	6031      	str	r1, [r6, #0]
 800410a:	07d9      	lsls	r1, r3, #31
 800410c:	bf44      	itt	mi
 800410e:	f043 0320 	orrmi.w	r3, r3, #32
 8004112:	6023      	strmi	r3, [r4, #0]
 8004114:	b11d      	cbz	r5, 800411e <_printf_i+0x19e>
 8004116:	2310      	movs	r3, #16
 8004118:	e7ac      	b.n	8004074 <_printf_i+0xf4>
 800411a:	4827      	ldr	r0, [pc, #156]	@ (80041b8 <_printf_i+0x238>)
 800411c:	e7e9      	b.n	80040f2 <_printf_i+0x172>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	f023 0320 	bic.w	r3, r3, #32
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	e7f6      	b.n	8004116 <_printf_i+0x196>
 8004128:	4616      	mov	r6, r2
 800412a:	e7bd      	b.n	80040a8 <_printf_i+0x128>
 800412c:	6833      	ldr	r3, [r6, #0]
 800412e:	6825      	ldr	r5, [r4, #0]
 8004130:	6961      	ldr	r1, [r4, #20]
 8004132:	1d18      	adds	r0, r3, #4
 8004134:	6030      	str	r0, [r6, #0]
 8004136:	062e      	lsls	r6, r5, #24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	d501      	bpl.n	8004140 <_printf_i+0x1c0>
 800413c:	6019      	str	r1, [r3, #0]
 800413e:	e002      	b.n	8004146 <_printf_i+0x1c6>
 8004140:	0668      	lsls	r0, r5, #25
 8004142:	d5fb      	bpl.n	800413c <_printf_i+0x1bc>
 8004144:	8019      	strh	r1, [r3, #0]
 8004146:	2300      	movs	r3, #0
 8004148:	6123      	str	r3, [r4, #16]
 800414a:	4616      	mov	r6, r2
 800414c:	e7bc      	b.n	80040c8 <_printf_i+0x148>
 800414e:	6833      	ldr	r3, [r6, #0]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	6032      	str	r2, [r6, #0]
 8004154:	681e      	ldr	r6, [r3, #0]
 8004156:	6862      	ldr	r2, [r4, #4]
 8004158:	2100      	movs	r1, #0
 800415a:	4630      	mov	r0, r6
 800415c:	f7fc f840 	bl	80001e0 <memchr>
 8004160:	b108      	cbz	r0, 8004166 <_printf_i+0x1e6>
 8004162:	1b80      	subs	r0, r0, r6
 8004164:	6060      	str	r0, [r4, #4]
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	2300      	movs	r3, #0
 800416c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004170:	e7aa      	b.n	80040c8 <_printf_i+0x148>
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	4632      	mov	r2, r6
 8004176:	4649      	mov	r1, r9
 8004178:	4640      	mov	r0, r8
 800417a:	47d0      	blx	sl
 800417c:	3001      	adds	r0, #1
 800417e:	d0ad      	beq.n	80040dc <_printf_i+0x15c>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	079b      	lsls	r3, r3, #30
 8004184:	d413      	bmi.n	80041ae <_printf_i+0x22e>
 8004186:	68e0      	ldr	r0, [r4, #12]
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	4298      	cmp	r0, r3
 800418c:	bfb8      	it	lt
 800418e:	4618      	movlt	r0, r3
 8004190:	e7a6      	b.n	80040e0 <_printf_i+0x160>
 8004192:	2301      	movs	r3, #1
 8004194:	4632      	mov	r2, r6
 8004196:	4649      	mov	r1, r9
 8004198:	4640      	mov	r0, r8
 800419a:	47d0      	blx	sl
 800419c:	3001      	adds	r0, #1
 800419e:	d09d      	beq.n	80040dc <_printf_i+0x15c>
 80041a0:	3501      	adds	r5, #1
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	9903      	ldr	r1, [sp, #12]
 80041a6:	1a5b      	subs	r3, r3, r1
 80041a8:	42ab      	cmp	r3, r5
 80041aa:	dcf2      	bgt.n	8004192 <_printf_i+0x212>
 80041ac:	e7eb      	b.n	8004186 <_printf_i+0x206>
 80041ae:	2500      	movs	r5, #0
 80041b0:	f104 0619 	add.w	r6, r4, #25
 80041b4:	e7f5      	b.n	80041a2 <_printf_i+0x222>
 80041b6:	bf00      	nop
 80041b8:	0800454b 	.word	0x0800454b
 80041bc:	0800455c 	.word	0x0800455c

080041c0 <__sflush_r>:
 80041c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	0716      	lsls	r6, r2, #28
 80041ca:	4605      	mov	r5, r0
 80041cc:	460c      	mov	r4, r1
 80041ce:	d454      	bmi.n	800427a <__sflush_r+0xba>
 80041d0:	684b      	ldr	r3, [r1, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc02      	bgt.n	80041dc <__sflush_r+0x1c>
 80041d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	dd48      	ble.n	800426e <__sflush_r+0xae>
 80041dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041de:	2e00      	cmp	r6, #0
 80041e0:	d045      	beq.n	800426e <__sflush_r+0xae>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80041e8:	682f      	ldr	r7, [r5, #0]
 80041ea:	6a21      	ldr	r1, [r4, #32]
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	d030      	beq.n	8004252 <__sflush_r+0x92>
 80041f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	0759      	lsls	r1, r3, #29
 80041f6:	d505      	bpl.n	8004204 <__sflush_r+0x44>
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80041fe:	b10b      	cbz	r3, 8004204 <__sflush_r+0x44>
 8004200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	4628      	mov	r0, r5
 800420c:	47b0      	blx	r6
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	d106      	bne.n	8004222 <__sflush_r+0x62>
 8004214:	6829      	ldr	r1, [r5, #0]
 8004216:	291d      	cmp	r1, #29
 8004218:	d82b      	bhi.n	8004272 <__sflush_r+0xb2>
 800421a:	4a2a      	ldr	r2, [pc, #168]	@ (80042c4 <__sflush_r+0x104>)
 800421c:	410a      	asrs	r2, r1
 800421e:	07d6      	lsls	r6, r2, #31
 8004220:	d427      	bmi.n	8004272 <__sflush_r+0xb2>
 8004222:	2200      	movs	r2, #0
 8004224:	6062      	str	r2, [r4, #4]
 8004226:	04d9      	lsls	r1, r3, #19
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	d504      	bpl.n	8004238 <__sflush_r+0x78>
 800422e:	1c42      	adds	r2, r0, #1
 8004230:	d101      	bne.n	8004236 <__sflush_r+0x76>
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	b903      	cbnz	r3, 8004238 <__sflush_r+0x78>
 8004236:	6560      	str	r0, [r4, #84]	@ 0x54
 8004238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800423a:	602f      	str	r7, [r5, #0]
 800423c:	b1b9      	cbz	r1, 800426e <__sflush_r+0xae>
 800423e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004242:	4299      	cmp	r1, r3
 8004244:	d002      	beq.n	800424c <__sflush_r+0x8c>
 8004246:	4628      	mov	r0, r5
 8004248:	f7ff fbf2 	bl	8003a30 <_free_r>
 800424c:	2300      	movs	r3, #0
 800424e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004250:	e00d      	b.n	800426e <__sflush_r+0xae>
 8004252:	2301      	movs	r3, #1
 8004254:	4628      	mov	r0, r5
 8004256:	47b0      	blx	r6
 8004258:	4602      	mov	r2, r0
 800425a:	1c50      	adds	r0, r2, #1
 800425c:	d1c9      	bne.n	80041f2 <__sflush_r+0x32>
 800425e:	682b      	ldr	r3, [r5, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0c6      	beq.n	80041f2 <__sflush_r+0x32>
 8004264:	2b1d      	cmp	r3, #29
 8004266:	d001      	beq.n	800426c <__sflush_r+0xac>
 8004268:	2b16      	cmp	r3, #22
 800426a:	d11e      	bne.n	80042aa <__sflush_r+0xea>
 800426c:	602f      	str	r7, [r5, #0]
 800426e:	2000      	movs	r0, #0
 8004270:	e022      	b.n	80042b8 <__sflush_r+0xf8>
 8004272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004276:	b21b      	sxth	r3, r3
 8004278:	e01b      	b.n	80042b2 <__sflush_r+0xf2>
 800427a:	690f      	ldr	r7, [r1, #16]
 800427c:	2f00      	cmp	r7, #0
 800427e:	d0f6      	beq.n	800426e <__sflush_r+0xae>
 8004280:	0793      	lsls	r3, r2, #30
 8004282:	680e      	ldr	r6, [r1, #0]
 8004284:	bf08      	it	eq
 8004286:	694b      	ldreq	r3, [r1, #20]
 8004288:	600f      	str	r7, [r1, #0]
 800428a:	bf18      	it	ne
 800428c:	2300      	movne	r3, #0
 800428e:	eba6 0807 	sub.w	r8, r6, r7
 8004292:	608b      	str	r3, [r1, #8]
 8004294:	f1b8 0f00 	cmp.w	r8, #0
 8004298:	dde9      	ble.n	800426e <__sflush_r+0xae>
 800429a:	6a21      	ldr	r1, [r4, #32]
 800429c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800429e:	4643      	mov	r3, r8
 80042a0:	463a      	mov	r2, r7
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b0      	blx	r6
 80042a6:	2800      	cmp	r0, #0
 80042a8:	dc08      	bgt.n	80042bc <__sflush_r+0xfc>
 80042aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042bc:	4407      	add	r7, r0
 80042be:	eba8 0800 	sub.w	r8, r8, r0
 80042c2:	e7e7      	b.n	8004294 <__sflush_r+0xd4>
 80042c4:	dfbffffe 	.word	0xdfbffffe

080042c8 <_fflush_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	4605      	mov	r5, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	b913      	cbnz	r3, 80042d8 <_fflush_r+0x10>
 80042d2:	2500      	movs	r5, #0
 80042d4:	4628      	mov	r0, r5
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	b118      	cbz	r0, 80042e2 <_fflush_r+0x1a>
 80042da:	6a03      	ldr	r3, [r0, #32]
 80042dc:	b90b      	cbnz	r3, 80042e2 <_fflush_r+0x1a>
 80042de:	f7ff f99f 	bl	8003620 <__sinit>
 80042e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f3      	beq.n	80042d2 <_fflush_r+0xa>
 80042ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042ec:	07d0      	lsls	r0, r2, #31
 80042ee:	d404      	bmi.n	80042fa <_fflush_r+0x32>
 80042f0:	0599      	lsls	r1, r3, #22
 80042f2:	d402      	bmi.n	80042fa <_fflush_r+0x32>
 80042f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042f6:	f7ff fb8a 	bl	8003a0e <__retarget_lock_acquire_recursive>
 80042fa:	4628      	mov	r0, r5
 80042fc:	4621      	mov	r1, r4
 80042fe:	f7ff ff5f 	bl	80041c0 <__sflush_r>
 8004302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004304:	07da      	lsls	r2, r3, #31
 8004306:	4605      	mov	r5, r0
 8004308:	d4e4      	bmi.n	80042d4 <_fflush_r+0xc>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	059b      	lsls	r3, r3, #22
 800430e:	d4e1      	bmi.n	80042d4 <_fflush_r+0xc>
 8004310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004312:	f7ff fb7d 	bl	8003a10 <__retarget_lock_release_recursive>
 8004316:	e7dd      	b.n	80042d4 <_fflush_r+0xc>

08004318 <__swhatbuf_r>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	460c      	mov	r4, r1
 800431c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004320:	2900      	cmp	r1, #0
 8004322:	b096      	sub	sp, #88	@ 0x58
 8004324:	4615      	mov	r5, r2
 8004326:	461e      	mov	r6, r3
 8004328:	da0d      	bge.n	8004346 <__swhatbuf_r+0x2e>
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	bf14      	ite	ne
 8004336:	2340      	movne	r3, #64	@ 0x40
 8004338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800433c:	2000      	movs	r0, #0
 800433e:	6031      	str	r1, [r6, #0]
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	b016      	add	sp, #88	@ 0x58
 8004344:	bd70      	pop	{r4, r5, r6, pc}
 8004346:	466a      	mov	r2, sp
 8004348:	f000 f848 	bl	80043dc <_fstat_r>
 800434c:	2800      	cmp	r0, #0
 800434e:	dbec      	blt.n	800432a <__swhatbuf_r+0x12>
 8004350:	9901      	ldr	r1, [sp, #4]
 8004352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800435a:	4259      	negs	r1, r3
 800435c:	4159      	adcs	r1, r3
 800435e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004362:	e7eb      	b.n	800433c <__swhatbuf_r+0x24>

08004364 <__smakebuf_r>:
 8004364:	898b      	ldrh	r3, [r1, #12]
 8004366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004368:	079d      	lsls	r5, r3, #30
 800436a:	4606      	mov	r6, r0
 800436c:	460c      	mov	r4, r1
 800436e:	d507      	bpl.n	8004380 <__smakebuf_r+0x1c>
 8004370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	6123      	str	r3, [r4, #16]
 8004378:	2301      	movs	r3, #1
 800437a:	6163      	str	r3, [r4, #20]
 800437c:	b003      	add	sp, #12
 800437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004380:	ab01      	add	r3, sp, #4
 8004382:	466a      	mov	r2, sp
 8004384:	f7ff ffc8 	bl	8004318 <__swhatbuf_r>
 8004388:	9f00      	ldr	r7, [sp, #0]
 800438a:	4605      	mov	r5, r0
 800438c:	4639      	mov	r1, r7
 800438e:	4630      	mov	r0, r6
 8004390:	f7ff fbba 	bl	8003b08 <_malloc_r>
 8004394:	b948      	cbnz	r0, 80043aa <__smakebuf_r+0x46>
 8004396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800439a:	059a      	lsls	r2, r3, #22
 800439c:	d4ee      	bmi.n	800437c <__smakebuf_r+0x18>
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	e7e2      	b.n	8004370 <__smakebuf_r+0xc>
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	6020      	str	r0, [r4, #0]
 80043ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	9b01      	ldr	r3, [sp, #4]
 80043b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80043ba:	b15b      	cbz	r3, 80043d4 <__smakebuf_r+0x70>
 80043bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043c0:	4630      	mov	r0, r6
 80043c2:	f000 f81d 	bl	8004400 <_isatty_r>
 80043c6:	b128      	cbz	r0, 80043d4 <__smakebuf_r+0x70>
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	431d      	orrs	r5, r3
 80043d8:	81a5      	strh	r5, [r4, #12]
 80043da:	e7cf      	b.n	800437c <__smakebuf_r+0x18>

080043dc <_fstat_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4d07      	ldr	r5, [pc, #28]	@ (80043fc <_fstat_r+0x20>)
 80043e0:	2300      	movs	r3, #0
 80043e2:	4604      	mov	r4, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	f7fc fc4f 	bl	8000c8c <_fstat>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	d102      	bne.n	80043f8 <_fstat_r+0x1c>
 80043f2:	682b      	ldr	r3, [r5, #0]
 80043f4:	b103      	cbz	r3, 80043f8 <_fstat_r+0x1c>
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	bd38      	pop	{r3, r4, r5, pc}
 80043fa:	bf00      	nop
 80043fc:	200005a0 	.word	0x200005a0

08004400 <_isatty_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4d06      	ldr	r5, [pc, #24]	@ (800441c <_isatty_r+0x1c>)
 8004404:	2300      	movs	r3, #0
 8004406:	4604      	mov	r4, r0
 8004408:	4608      	mov	r0, r1
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	f7fc fc4e 	bl	8000cac <_isatty>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_isatty_r+0x1a>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	b103      	cbz	r3, 800441a <_isatty_r+0x1a>
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	200005a0 	.word	0x200005a0

08004420 <_sbrk_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4d06      	ldr	r5, [pc, #24]	@ (800443c <_sbrk_r+0x1c>)
 8004424:	2300      	movs	r3, #0
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fc fc56 	bl	8000cdc <_sbrk>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_sbrk_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_sbrk_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	200005a0 	.word	0x200005a0

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr
